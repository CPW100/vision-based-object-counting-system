# Generate TF record
import glob
import io
import pandas as pd
import xml.etree.ElementTree as ET
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'    # Suppress TensorFlow logging (1)
import tensorflow as tf
from PIL import Image
from object_detection.utils import dataset_util, label_map_util
from collections import namedtuple

class Generate_tfrecords():
    def __init__(self, 
                 label_map_dict, xml_path, tf_record_output_path, csv_path):
        self.label_map_dict = label_map_dict
        self.xml_path = xml_path
        self.tf_record_output_path = tf_record_output_path
        self.csv_path = csv_path

    def create_tf_example(self, group, path):
        with tf.io.gfile.GFile(os.path.join(path, '{}'.format(group.filename)), 'rb') as fid:
            encoded_jpg = fid.read()
        encoded_jpg_io = io.BytesIO(encoded_jpg)
        image = Image.open(encoded_jpg_io)
        width, height = image.size

        filename = group.filename.encode('utf8')
        image_format = b'jpg'
        xmins = []
        xmaxs = []
        ymins = []
        ymaxs = []
        classes_text = []
        classes = []

        for index, row in group.object.iterrows():
            xmins.append(row['xmin'] / width)
            xmaxs.append(row['xmax'] / width)
            ymins.append(row['ymin'] / height)
            ymaxs.append(row['ymax'] / height)
            classes_text.append(row['class'].encode('utf8'))
            classes.append(self.class_text_to_int(row['class']))

        tf_example = tf.train.Example(features=tf.train.Features(feature={
            'image/height': dataset_util.int64_feature(height),
            'image/width': dataset_util.int64_feature(width),
            'image/filename': dataset_util.bytes_feature(filename),
            'image/source_id': dataset_util.bytes_feature(filename),
            'image/encoded': dataset_util.bytes_feature(encoded_jpg),
            'image/format': dataset_util.bytes_feature(image_format),
            'image/object/bbox/xmin': dataset_util.float_list_feature(xmins),
            'image/object/bbox/xmax': dataset_util.float_list_feature(xmaxs),
            'image/object/bbox/ymin': dataset_util.float_list_feature(ymins),
            'image/object/bbox/ymax': dataset_util.float_list_feature(ymaxs),
            'image/object/class/text': dataset_util.bytes_list_feature(classes_text),
            'image/object/class/label': dataset_util.int64_list_feature(classes),
        }))
        return tf_example

    def class_text_to_int(self, row_label):
        return self.label_map_dict[row_label]

    def split(self, df, group):
        data = namedtuple('data', ['filename', 'object'])
        gb = df.groupby(group)
        print(gb)
        return [data(filename, gb.get_group(x)) for filename, x in zip(gb.groups.keys(), gb.groups)]


    def xml_to_csv(self):
        """Iterates through all .xml files (generated by labelImg) in a given directory and combines
        them in a single Pandas dataframe.

        Parameters:
        ----------
        path : str
            The path containing the .xml files
        Returns
        -------
        Pandas DataFrame
            The produced dataframe
        """
        xml_list = []
        for xml_file in glob.glob(self.xml_path + '/*.xml'):
            print(xml_file)
            tree = ET.parse(xml_file)
            root = tree.getroot()
            for member in root.findall('object'):
                value = (root.find('filename').text,
                            int(root.find('size')[0].text),
                            int(root.find('size')[1].text),
                            member[0].text,
                            int(member[4][0].text),
                            int(member[4][1].text),
                            int(member[4][2].text),
                            int(member[4][3].text)
                            )
                xml_list.append(value)
        column_name = ['filename', 'width', 'height',
                        'class', 'xmin', 'ymin', 'xmax', 'ymax']
        xml_df = pd.DataFrame(xml_list, columns=column_name)
        return xml_df


    def generate_tf_record_main(self):
        if not os.path.exists(self.tf_record_output_path):
            data = namedtuple('data', ['filename', 'object'])
            xml_df = self.xml_to_csv()
            gb = xml_df.groupby('filename')
            writer = tf.io.TFRecordWriter(self.tf_record_output_path)
            img_path = self.xml_path
            grouped = self.split(xml_df, 'filename')
            for group in grouped:
                tf_example = self.create_tf_example(group, img_path)
                writer.write(tf_example.SerializeToString())
            writer.close()
            print('Dataset TFRecords Status: Successfully created the TFRecord file: {}'.format(self.tf_record_output_path))
        if self.csv_path is not None:
            if not os.path.exists(self.csv_path):
                xml_df.to_csv(self.csv_path, index=None)
                print('Dataset CSV Status: Successfully created the CSV file: {}'.format(self.csv_path))


