[
    {
        "id": "83ce028f10c839ea",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c4f39e9c.3642f8",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e2a00462eac7bac3",
        "type": "telegram bot",
        "botname": "Jarvis",
        "usernames": "chongpeiwen",
        "chatids": "1902329739,1963528705",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "1000",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "57c166eb1e37ce1a",
        "type": "chatbot-telegram-node",
        "botname": "Jarvis",
        "usernames": "chongpeiwen,",
        "providerToken": "",
        "polling": "1000",
        "store": "",
        "log": "",
        "debug": true,
        "webHook": "",
        "connectMode": "polling"
    },
    {
        "id": "b22f969ace29e579",
        "type": "chatbot-telegram-node",
        "botname": "Jarvis",
        "usernames": "chongpeiwen,",
        "providerToken": "",
        "polling": "1000",
        "store": "",
        "log": "",
        "debug": true,
        "webHook": "",
        "connectMode": "polling"
    },
    {
        "id": "2ad5a4202cef0248",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0.0.0.0",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "d7901f40.2659d",
        "type": "ui_tab",
        "name": "Server",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c008cdfde8ea96b5",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "82a9943fa3568b87",
        "type": "ui_tab",
        "name": "Model Performance",
        "icon": "fa-bar-chart",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "19aa4f19b70241ed",
        "type": "ui_group",
        "name": "Choose Dataset",
        "tab": "82a9943fa3568b87",
        "order": 5,
        "disp": true,
        "width": 30,
        "collapse": false
    },
    {
        "id": "75b8816386e67f51",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 20,
        "height": 1
    },
    {
        "id": "ee47808f4d74e7e0",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 20,
        "height": 1
    },
    {
        "id": "c98fa4e034b924ca",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 20,
        "height": 1
    },
    {
        "id": "88c69a666afc5e5b",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "",
        "order": 9,
        "width": 20,
        "height": 1
    },
    {
        "id": "f1823c03810748d7",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "",
        "order": 10,
        "width": 20,
        "height": 1
    },
    {
        "id": "246dd42713443a64",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "",
        "order": 11,
        "width": 20,
        "height": 1
    },
    {
        "id": "dcb45e2746d00a63",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "",
        "order": 12,
        "width": 20,
        "height": 1
    },
    {
        "id": "a99c21f45dc3e105",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "",
        "order": 13,
        "width": 20,
        "height": 1
    },
    {
        "id": "39762e78189eb306",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "",
        "order": 14,
        "width": 20,
        "height": 1
    },
    {
        "id": "a74c7923a920116e",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "",
        "order": 15,
        "width": 20,
        "height": 1
    },
    {
        "id": "e7180e4e6e65650d",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "",
        "order": 16,
        "width": 20,
        "height": 1
    },
    {
        "id": "ce62a5e24fcd75a7",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "",
        "order": 17,
        "width": 20,
        "height": 1
    },
    {
        "id": "da612906.998368",
        "type": "ui_tab",
        "name": "Main-PC",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b070d416.db371",
        "type": "ui_group",
        "name": "Table",
        "tab": "cd895ba5.a7168",
        "order": 1,
        "disp": true,
        "width": "26",
        "collapse": false
    },
    {
        "id": "cd895ba5.a7168",
        "type": "ui_tab",
        "name": "Data Update",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7de23636.088a88",
        "type": "ui_group",
        "name": "Sever",
        "tab": "59c1a803.3cb648",
        "order": 1,
        "disp": true,
        "width": 20,
        "collapse": false
    },
    {
        "id": "59c1a803.3cb648",
        "type": "ui_tab",
        "name": "Server Menu",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e1bf805db2cba0ad",
        "type": "ui_spacer",
        "z": "c4f39e9c.3642f8",
        "name": "spacer",
        "group": "b070d416.db371",
        "order": 2,
        "width": 6,
        "height": 1
    },
    {
        "id": "6118aae739c2ac8d",
        "type": "ui_spacer",
        "z": "c4f39e9c.3642f8",
        "name": "spacer",
        "group": "b070d416.db371",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "a83bbc5ed044d3db",
        "type": "ui_spacer",
        "z": "c4f39e9c.3642f8",
        "name": "spacer",
        "group": "b070d416.db371",
        "order": 7,
        "width": 26,
        "height": 1
    },
    {
        "id": "2c19f2758cd45e5a",
        "type": "ui_spacer",
        "z": "c4f39e9c.3642f8",
        "name": "spacer",
        "group": "b070d416.db371",
        "order": 13,
        "width": 6,
        "height": 1
    },
    {
        "id": "cba1c551eb25be25",
        "type": "ui_spacer",
        "z": "c4f39e9c.3642f8",
        "name": "spacer",
        "group": "b070d416.db371",
        "order": 15,
        "width": 6,
        "height": 1
    },
    {
        "id": "a97c6a62adb7836e",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 5,
        "width": 9,
        "height": 1
    },
    {
        "id": "d46b495281afccfd",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 6,
        "width": 9,
        "height": 1
    },
    {
        "id": "f777542bf4e7b162",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 7,
        "width": 9,
        "height": 1
    },
    {
        "id": "dd94c36aca2c981d",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 8,
        "width": 9,
        "height": 1
    },
    {
        "id": "a0b4f0d12357df7c",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 9,
        "width": 9,
        "height": 1
    },
    {
        "id": "8b8b4188e150f96d",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 10,
        "width": 9,
        "height": 1
    },
    {
        "id": "fc4b5fe13d20e37a",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 11,
        "width": 9,
        "height": 1
    },
    {
        "id": "e75e1039bb7740e3",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 12,
        "width": 9,
        "height": 1
    },
    {
        "id": "263f08059cb61012",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 13,
        "width": 9,
        "height": 1
    },
    {
        "id": "9e18798060e932ef",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 14,
        "width": 9,
        "height": 1
    },
    {
        "id": "494ce5f4374bee9b",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 15,
        "width": 9,
        "height": 1
    },
    {
        "id": "75b5c0156bf0b2c1",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 16,
        "width": 9,
        "height": 1
    },
    {
        "id": "010480703a4159ef",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 17,
        "width": 9,
        "height": 1
    },
    {
        "id": "22aa3cd2bababb85",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 18,
        "width": 9,
        "height": 1
    },
    {
        "id": "51b0c305d0e1efc8",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 19,
        "width": 9,
        "height": 1
    },
    {
        "id": "b7636291c1f07131",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 20,
        "width": 9,
        "height": 1
    },
    {
        "id": "1f1d61436e141bb0",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 21,
        "width": 9,
        "height": 1
    },
    {
        "id": "a6ad3c41d7e79cb6",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 22,
        "width": 9,
        "height": 1
    },
    {
        "id": "a6aa1df335b3b79b",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 23,
        "width": 9,
        "height": 1
    },
    {
        "id": "1bda6174b6e32bf1",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "7de23636.088a88",
        "order": 24,
        "width": 9,
        "height": 1
    },
    {
        "id": "ad9b0f74a841e6c7",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 3,
        "width": 9,
        "height": 1
    },
    {
        "id": "0e7c50e07481b239",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "9427c26f5b42bf84",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 7,
        "width": 30,
        "height": 1
    },
    {
        "id": "c56495a592c8fff6",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "9a5f1b2e97a460ae",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "47966ba217fdc960",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "9c5208d7f37ca7de",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "7a7542d8ff802ee6",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "43915bd2eee874fa",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "06f92687ec049541",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "a6b01329be37e112",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "d82790c1c25c4c90",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "aa1682a045a8d7ca",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "b0506ab5ed620a5f",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "edcac0c0ee23fac4",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "14a5fbfe16e9b573",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 21,
        "width": 1,
        "height": 1
    },
    {
        "id": "8ed697b08e689514",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "08d632efd46cd7a6",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "0fa54de2b2c509b2",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "8a9745c7ff7ecb8b",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 25,
        "width": 1,
        "height": 1
    },
    {
        "id": "98d787d38f086089",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 26,
        "width": 1,
        "height": 1
    },
    {
        "id": "e08c4328308b137d",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 27,
        "width": 30,
        "height": 1
    },
    {
        "id": "b3577f8e931f203a",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 28,
        "width": 1,
        "height": 1
    },
    {
        "id": "dc11d7ff5dbb22f0",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 30,
        "width": 1,
        "height": 1
    },
    {
        "id": "92c9aeebb63127d7",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 31,
        "width": 1,
        "height": 1
    },
    {
        "id": "15bfea1f816d1fa1",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 32,
        "width": 1,
        "height": 1
    },
    {
        "id": "59876beb884bd9fd",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 33,
        "width": 1,
        "height": 1
    },
    {
        "id": "a0d08f80578d98fe",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 34,
        "width": 1,
        "height": 1
    },
    {
        "id": "e2f5ea2faccfd9a9",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 35,
        "width": 1,
        "height": 1
    },
    {
        "id": "77f2e9dc892eb7b0",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 36,
        "width": 1,
        "height": 1
    },
    {
        "id": "676085ab9028d6a4",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 37,
        "width": 1,
        "height": 1
    },
    {
        "id": "4527db13d92d8802",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 38,
        "width": 1,
        "height": 1
    },
    {
        "id": "2187944ec37da6a5",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 39,
        "width": 1,
        "height": 1
    },
    {
        "id": "24d484e264c96389",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 40,
        "width": 1,
        "height": 1
    },
    {
        "id": "bf58b20ac17e069a",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 41,
        "width": 1,
        "height": 1
    },
    {
        "id": "86ac36e07484d422",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 42,
        "width": 1,
        "height": 1
    },
    {
        "id": "493bbad2a71fcaee",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 43,
        "width": 1,
        "height": 1
    },
    {
        "id": "aaa970c4d93af388",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 44,
        "width": 1,
        "height": 1
    },
    {
        "id": "e36830b8ac937cb5",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 45,
        "width": 1,
        "height": 1
    },
    {
        "id": "fe778130b67e5fc9",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 46,
        "width": 1,
        "height": 1
    },
    {
        "id": "34d3568d844b579f",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 47,
        "width": 30,
        "height": 1
    },
    {
        "id": "d54fc7095401df83",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 48,
        "width": 1,
        "height": 1
    },
    {
        "id": "289cdb408a30fb85",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 50,
        "width": 1,
        "height": 1
    },
    {
        "id": "16eabe23ec82138e",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 51,
        "width": 1,
        "height": 1
    },
    {
        "id": "d21e57d90274a20c",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 52,
        "width": 1,
        "height": 1
    },
    {
        "id": "1e60948c09a26e90",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 53,
        "width": 1,
        "height": 1
    },
    {
        "id": "323cc331bad1f7ae",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 54,
        "width": 1,
        "height": 1
    },
    {
        "id": "1299f252ae0683f4",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 55,
        "width": 1,
        "height": 1
    },
    {
        "id": "b1767b41a0fde6b8",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 56,
        "width": 1,
        "height": 1
    },
    {
        "id": "a204f09496a79293",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 57,
        "width": 1,
        "height": 1
    },
    {
        "id": "faee2c7397e5e5f8",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 58,
        "width": 1,
        "height": 1
    },
    {
        "id": "0df137d949f12efc",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 59,
        "width": 1,
        "height": 1
    },
    {
        "id": "f5dfdd17e2f2824c",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 60,
        "width": 1,
        "height": 1
    },
    {
        "id": "9dcbab5453af7f7a",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 61,
        "width": 1,
        "height": 1
    },
    {
        "id": "ed84d04d2ada5326",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 62,
        "width": 1,
        "height": 1
    },
    {
        "id": "ca997bce43bf488f",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 63,
        "width": 1,
        "height": 1
    },
    {
        "id": "8c5c3e8b03ed0174",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 64,
        "width": 1,
        "height": 1
    },
    {
        "id": "f2366b149e9f0801",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 65,
        "width": 1,
        "height": 1
    },
    {
        "id": "38d922a352f01e4e",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 66,
        "width": 1,
        "height": 1
    },
    {
        "id": "3dfac8ba04aec30f",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 67,
        "width": 30,
        "height": 1
    },
    {
        "id": "eb3e4a29396f0119",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 68,
        "width": 1,
        "height": 1
    },
    {
        "id": "2c845478b5b5c561",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 70,
        "width": 1,
        "height": 1
    },
    {
        "id": "192ee3b2e43771d9",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 71,
        "width": 1,
        "height": 1
    },
    {
        "id": "f2e713a6fdc6f46a",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 72,
        "width": 1,
        "height": 1
    },
    {
        "id": "b465be971befa492",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 73,
        "width": 1,
        "height": 1
    },
    {
        "id": "40438dcdaa6d92d5",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 74,
        "width": 1,
        "height": 1
    },
    {
        "id": "1a56d3802db39b93",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 75,
        "width": 1,
        "height": 1
    },
    {
        "id": "4ba23de2929ff69b",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 76,
        "width": 1,
        "height": 1
    },
    {
        "id": "21f4c9a70f902209",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 77,
        "width": 1,
        "height": 1
    },
    {
        "id": "7cf12ffe86d42548",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 78,
        "width": 1,
        "height": 1
    },
    {
        "id": "631bb4c7529deefe",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 79,
        "width": 1,
        "height": 1
    },
    {
        "id": "62903b441b59a8ab",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 80,
        "width": 1,
        "height": 1
    },
    {
        "id": "01f840318497167f",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 81,
        "width": 1,
        "height": 1
    },
    {
        "id": "16d64fc7af636822",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 82,
        "width": 1,
        "height": 1
    },
    {
        "id": "d6b97d1cc93930bd",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 83,
        "width": 1,
        "height": 1
    },
    {
        "id": "3d86b87ab0af6a1b",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 84,
        "width": 1,
        "height": 1
    },
    {
        "id": "532c11a926fb0bc3",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 85,
        "width": 1,
        "height": 1
    },
    {
        "id": "960fe4a363056afb",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 86,
        "width": 1,
        "height": 1
    },
    {
        "id": "480a8131dc2789d2",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 87,
        "width": 1,
        "height": 1
    },
    {
        "id": "46373299847ded35",
        "type": "ui_spacer",
        "z": "83ce028f10c839ea",
        "name": "spacer",
        "group": "19aa4f19b70241ed",
        "order": 88,
        "width": 1,
        "height": 1
    },
    {
        "id": "8e98174ba22f6950",
        "type": "http request",
        "z": "83ce028f10c839ea",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "https://yt3.ggpht.com/ytc/AKedOLRIec7gUC89wc0OGstCraoIatVagBJHOpLW-n5QrQ=s900-c-k-c0x00ffffff-no-rj",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 370,
        "y": 120,
        "wires": [
            [
                "7ff6cef81e49970a",
                "e6657924c32b107b"
            ]
        ]
    },
    {
        "id": "7ff6cef81e49970a",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 120,
        "wires": []
    },
    {
        "id": "4e82bfe5f4d1a60c",
        "type": "inject",
        "z": "83ce028f10c839ea",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "8e98174ba22f6950"
            ]
        ]
    },
    {
        "id": "e6657924c32b107b",
        "type": "base64",
        "z": "83ce028f10c839ea",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 440,
        "y": 180,
        "wires": [
            [
                "b64d34bb5cb042de"
            ]
        ]
    },
    {
        "id": "b64d34bb5cb042de",
        "type": "jimp-image",
        "z": "83ce028f10c839ea",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 600,
        "y": 180,
        "wires": [
            [
                "fb5a11364e25c508"
            ]
        ]
    },
    {
        "id": "fb5a11364e25c508",
        "type": "image viewer",
        "z": "83ce028f10c839ea",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "active": true,
        "x": 740,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "4ce5eece616b5c88",
        "type": "base64",
        "z": "83ce028f10c839ea",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 700,
        "y": 600,
        "wires": [
            [
                "691b6cb82c2ab0a9"
            ]
        ]
    },
    {
        "id": "691b6cb82c2ab0a9",
        "type": "jimp-image",
        "z": "83ce028f10c839ea",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 710,
        "y": 660,
        "wires": [
            [
                "e9fd2c6f7cd95e70"
            ]
        ]
    },
    {
        "id": "e9fd2c6f7cd95e70",
        "type": "image viewer",
        "z": "83ce028f10c839ea",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "active": true,
        "x": 850,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "03affeee5fb52f98",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var content=flow.get('content') || 0;\nvar input_type = msg.payload.type;\nconst output = {\n    msg_type: \"\",\n    msg_content: \"\"\n}\noutput.msg_content = msg.payload.content;\nif (input_type==\"photo\")\n{\n    output.msg_type = 1 ;\n    flow.set('content',output.msg_content )\n}\nelse\n{\n    output.msg_type = 2;\n    flow.set('content',output.msg_content )\n}\nmsg.payload = output.msg_type\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 440,
        "wires": [
            [
                "6dcf359990e42e69"
            ]
        ]
    },
    {
        "id": "6dcf359990e42e69",
        "type": "switch",
        "z": "83ce028f10c839ea",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 440,
        "wires": [
            [
                "5cf881d47e6202dd"
            ],
            [
                "d92eb6750d960ec5"
            ]
        ]
    },
    {
        "id": "5cf881d47e6202dd",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "msg.payload = flow.get('content');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "dd2dc6f6a701c8f6"
            ]
        ]
    },
    {
        "id": "d92eb6750d960ec5",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "msg.payload = flow.get('content');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 600,
        "wires": [
            [
                "4ce5eece616b5c88",
                "ed9a371dc2cd0326"
            ]
        ]
    },
    {
        "id": "dd2dc6f6a701c8f6",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 400,
        "wires": []
    },
    {
        "id": "ed9a371dc2cd0326",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 720,
        "wires": []
    },
    {
        "id": "e384ae3269e891de",
        "type": "http request",
        "z": "83ce028f10c839ea",
        "name": "",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 490,
        "y": 2320,
        "wires": [
            [
                "21dfdeeee8e63d19",
                "8cde8c170daa4c64"
            ]
        ]
    },
    {
        "id": "21dfdeeee8e63d19",
        "type": "base64",
        "z": "83ce028f10c839ea",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 520,
        "y": 2420,
        "wires": [
            [
                "85401f95a39da80e"
            ]
        ]
    },
    {
        "id": "85401f95a39da80e",
        "type": "jimp-image",
        "z": "83ce028f10c839ea",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 680,
        "y": 2420,
        "wires": [
            [
                "5e832da188440af2"
            ]
        ]
    },
    {
        "id": "5e832da188440af2",
        "type": "image viewer",
        "z": "83ce028f10c839ea",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "active": true,
        "x": 850,
        "y": 2420,
        "wires": [
            []
        ]
    },
    {
        "id": "c831cd3b855f14b0",
        "type": "telegram receiver",
        "z": "83ce028f10c839ea",
        "name": "",
        "bot": "e2a00462eac7bac3",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 110,
        "y": 2160,
        "wires": [
            [
                "a9e0a6dbada4f165"
            ],
            []
        ]
    },
    {
        "id": "729d2df6c0406727",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "msg.payload = flow.get('content2');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 100,
        "y": 2320,
        "wires": [
            [
                "d41f5de469208dd6",
                "590838d96fca98b6"
            ]
        ]
    },
    {
        "id": "a9e0a6dbada4f165",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var content=flow.get('content2') || 0;\nflow.get('img_name2') || 0;\nflow.get('sentMessageId') || 0;\nvar input_type = msg.payload.type;\nmsg_type = \"\"\nif (input_type==\"photo\")\n{\n    msg_type = 1;\n    flow.set('content2', msg.payload.weblink)\n    flow.set('img_name2', msg.payload.caption)\n    flow.set('sentMessageId', msg.payload.messageId)\n}\nelse\n{\n    msg_type = 2;\n    flow.set('content2', msg.payload.content)\n    flow.set('img_name2', null)\n    flow.set('sentMessageId', msg.payload.messageId)\n}\nmsg.payload = msg_type\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2040,
        "wires": [
            [
                "05a5d7943793c4ab"
            ]
        ]
    },
    {
        "id": "05a5d7943793c4ab",
        "type": "switch",
        "z": "83ce028f10c839ea",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 2040,
        "wires": [
            [
                "f821d50d93a8bc80"
            ],
            [
                "642af6ad5340cbdb"
            ]
        ]
    },
    {
        "id": "f821d50d93a8bc80",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "msg.payload = flow.get('content2');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 2040,
        "wires": [
            [
                "618a29395aa62008"
            ]
        ]
    },
    {
        "id": "618a29395aa62008",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 2040,
        "wires": []
    },
    {
        "id": "d41f5de469208dd6",
        "type": "change",
        "z": "83ce028f10c839ea",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 2320,
        "wires": [
            [
                "e384ae3269e891de"
            ]
        ]
    },
    {
        "id": "c583f85e2e5c05e1",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "python",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 330,
        "y": 2580,
        "wires": [
            [
                "186853d2fd2e72f2"
            ],
            [
                "bfe201b8f90cccb0"
            ],
            [
                "f388d0f7bced04d4"
            ]
        ]
    },
    {
        "id": "186853d2fd2e72f2",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 2520,
        "wires": []
    },
    {
        "id": "bfe201b8f90cccb0",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 568,
        "y": 2573,
        "wires": []
    },
    {
        "id": "f388d0f7bced04d4",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 2620,
        "wires": []
    },
    {
        "id": "5c6f27ba8423cc19",
        "type": "inject",
        "z": "83ce028f10c839ea",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "D:/Program_Files/VisualStudio2019/convert_base64_to_jpg/Node_RED_Project/Node_RED_Project.py ",
        "payloadType": "str",
        "x": 100,
        "y": 2580,
        "wires": [
            [
                "c583f85e2e5c05e1"
            ]
        ]
    },
    {
        "id": "22fd00fab52f3d1f",
        "type": "mqtt in",
        "z": "83ce028f10c839ea",
        "name": "mqtt-subscribe",
        "topic": "test",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ad5a4202cef0248",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 130,
        "y": 2740,
        "wires": [
            [
                "9e293f300e609a82"
            ]
        ]
    },
    {
        "id": "9e293f300e609a82",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 2740,
        "wires": []
    },
    {
        "id": "642af6ad5340cbdb",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var img_number = flow.get('img_number') + 1;\nflow.set('img_number', img_number);\nvar save_status = flow.get('Save');\nvar directory = flow.get('node_red_dir');\nvar content=flow.get('img_fpath2') || 0;\nvar img_name_list = flow.get('img_name_list') || [];\nvar img_path = \"img_\" + String(img_number)\n\nif (save_status==\"yes\"){\n    if (flow.get('img_name2')==undefined){\n        flow.set('img_name2', img_path)\n    }\n    img_path = directory + \"temp_img/\" + flow.get('img_name2') + \".jpg\"; \n    img_name_list.push(flow.get('img_name2'));\n    flow.set('img_fpath2', img_path);\n    flow.set('img_name_list', img_name_list);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2100,
        "wires": [
            [
                "94d733fc82f4ba83",
                "4fed09eb7ba5e6c2"
            ]
        ]
    },
    {
        "id": "4c5dbe751b525ccc",
        "type": "file",
        "z": "83ce028f10c839ea",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 870,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "3c6f916cd6f08ecb",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "msg.filename = flow.get(\"img_fpath2\");\nmsg.payload = msg.payload;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 2320,
        "wires": [
            [
                "4c5dbe751b525ccc"
            ]
        ]
    },
    {
        "id": "aba3e5c75f3a7404",
        "type": "telegram command",
        "z": "83ce028f10c839ea",
        "name": "",
        "command": "/Hi",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e2a00462eac7bac3",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 90,
        "y": 920,
        "wires": [
            [
                "f7fef2143fc5e80a",
                "08250f026f4cead3"
            ],
            []
        ]
    },
    {
        "id": "810055b86072d28e",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "python",
        "addpay": "payload",
        "append": "-u D:/my_dir/streamlit_user_directory",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "script 1",
        "x": 480,
        "y": 920,
        "wires": [
            [
                "5e6e05215a2d744f"
            ],
            [
                "dbed5a1e1e859af1"
            ],
            [
                "dbed5a1e1e859af1"
            ]
        ]
    },
    {
        "id": "f7fef2143fc5e80a",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('Node-RED-script-dir') || 0;\nflow.get('chatId') || 0;\nvar chatId_list = [1902329739,1963528705];\nflow.set('chatId', chatId_list);\nflow.set('Node-RED-script-dir', 'D:/Program_Files/VisualStudio2019/convert_base64_to_jpg/Node_RED_Project/');\n\nvar dir = flow.get('Node-RED-script-dir') + 'script_1.py';\n\nmsg.payload = dir\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 920,
        "wires": [
            [
                "810055b86072d28e"
            ]
        ]
    },
    {
        "id": "5e6e05215a2d744f",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('sc1') || 0;\nflow.get('sc1_status1') || false;\nflow.get('ui_model_list') || 0;\nflow.set('sc1', JSON.parse(msg.payload));\nvar input_1 = flow.get('sc1');\nvar model_list = [];\nfor (let i=0; i<input_1.length; i++)\n{\n    dataset_name = String(Object.keys(input_1[i])[0]);\n    model_array = input_1[i][dataset_name]\n    for (let k=0; k<model_array.length; k++)\n    {\n        model_name = Object.keys(model_array[k])[0];\n        model_list.push(model_name);\n    }\n}\nflow.set('ui_model_list', model_list);\n\nflow.set('sc1_status1', true);\nmsg.payload = flow.get('sc1') ;\nmsg.sc1_status1 = flow.get('sc1_status1');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 920,
        "wires": [
            [
                "e3255167f9b2f1ce",
                "0cb6964b477ba1b7"
            ]
        ]
    },
    {
        "id": "fd031f71fcd66318",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('dir_list') || 0;\n\nvar input = flow.get('sc1');\nvar list = [];\nstr = \"Welcome On Board! 😘\\n\\rHere is a list of your streamlit user directory:\\n\\r\"\n\nfor (let i=0; i<input.length; i++)\n{\n    var key = String(Object.keys(input[i])[0]);\n    list.push(key);\n    str += String(i+1) + \" --> \" + String(key) + \"\\n\\r\";\n}\nstr += \"\\n\\r\"+ \"Please select one directory by using command below:\\n\\r\"\nstr += \"/Dir (number)\\n\\n\\r\"\nstr += \"For example: \" + \"/Dir \" + String(1) + \"\\n\\r\" + \"The chosen user directory is: \\n\\r<<\\n\\r\" + list[0] + \"\\n\\r>>\"\nvar output = {\n    content:str,\n    type:'message',\n    chatId: flow.get('chatId')\n};\nflow.set('sc1_status1', false);\nflow.set('dir_list', list);\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1000,
        "wires": [
            [
                "54ca7b8da71af444"
            ]
        ]
    },
    {
        "id": "92eda34924d7c8de",
        "type": "switch",
        "z": "83ce028f10c839ea",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 1000,
        "wires": [
            [
                "fd031f71fcd66318"
            ],
            []
        ]
    },
    {
        "id": "0cb6964b477ba1b7",
        "type": "change",
        "z": "83ce028f10c839ea",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sc1_status1",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 120,
        "y": 1000,
        "wires": [
            [
                "92eda34924d7c8de"
            ]
        ]
    },
    {
        "id": "54ca7b8da71af444",
        "type": "telegram sender",
        "z": "83ce028f10c839ea",
        "name": "",
        "bot": "e2a00462eac7bac3",
        "haserroroutput": false,
        "outputs": 1,
        "x": 630,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "e3255167f9b2f1ce",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 920,
        "wires": []
    },
    {
        "id": "c64166adb7c1d832",
        "type": "telegram command",
        "z": "83ce028f10c839ea",
        "name": "",
        "command": "/Dir",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e2a00462eac7bac3",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 90,
        "y": 1220,
        "wires": [
            [
                "4ffaad624668b0eb"
            ],
            []
        ]
    },
    {
        "id": "4ffaad624668b0eb",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('Dir') || 0;\nvar input = msg.payload;\nvar content = parseFloat(Number(input.content));\nvar status = \"\";\nif (isNaN(content)==false)\n{\n    flow.set('Dir',content);\n    status = true;\n}\nelse\n{\n    flow.set('Dir',0);\n    status = false;\n}\nmsg.payload = status;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1220,
        "wires": [
            [
                "9b1002e3aba74f24"
            ]
        ]
    },
    {
        "id": "88797f90bb247580",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('model_list') || 0;\nvar input_1 = flow.get('sc1');\nvar input_2 = flow.get('Dir');\nvar dir_name = String(Object.keys(input_1[input_2-1])[0]);\nvar model_num = input_1[input_2-1][dir_name].length;\nvar model_list = [];\n\nstr = \"Nice job!\\n\\rYour chosen directory is \\n\\r<<\\n\\r\" + dir_name;\nstr += \"\\n\\r>>\\n\\r\"\nstr += \"Now, you may choose one of the following model:\\n\\r\";\n\nfor (let i=0; i<model_num; i++)\n{\n    var model = Object.keys(input_1[input_2-1][dir_name][i]);\n    model_list.push(model[0]);\n    str += String(i+1) + \" --> \" + model + \"\\n\";\n}\n\nstr += \"\\n\\rPlease type the following command to select a model:\\n\\r\";\nstr += \"/Model (number)\\n\\n\\r\";\nstr += \"For example: /Model \" + String(1) + \"\\n\\r\";\nstr += \"The chosen model is:\\n\\r\";\nstr += \"<<\\n\\r\" + model_list[0] + \"\\n\\r>>\";\n\nflow.set('model_list', model_list);\n\nvar output = {\n    content:str,\n    type:'message',\n    chatId: flow.get('chatId')\n};\n\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1160,
        "wires": [
            [
                "7da637d75d49099c",
                "e09223d6f38b9245"
            ]
        ]
    },
    {
        "id": "9b1002e3aba74f24",
        "type": "switch",
        "z": "83ce028f10c839ea",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 1220,
        "wires": [
            [
                "88797f90bb247580"
            ],
            []
        ]
    },
    {
        "id": "7da637d75d49099c",
        "type": "telegram sender",
        "z": "83ce028f10c839ea",
        "name": "",
        "bot": "e2a00462eac7bac3",
        "haserroroutput": false,
        "outputs": 1,
        "x": 710,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "0af5f768eed7beb1",
        "type": "telegram command",
        "z": "83ce028f10c839ea",
        "name": "",
        "command": "/Model",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e2a00462eac7bac3",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 90,
        "y": 1360,
        "wires": [
            [
                "8f5f4d7bedd417eb"
            ],
            []
        ]
    },
    {
        "id": "8f5f4d7bedd417eb",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('Model') || 0;\nvar input = msg.payload;\nvar content = parseFloat(Number(input.content));\nvar status = \"\";\nif (isNaN(content)==false)\n{\n    flow.set('Model',content);\n    status = true;\n}\nelse\n{\n    flow.set('Model',0);\n    status = false;\n}\nmsg.payload = status;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1360,
        "wires": [
            [
                "0ccc44a9c68e687c"
            ]
        ]
    },
    {
        "id": "0ccc44a9c68e687c",
        "type": "switch",
        "z": "83ce028f10c839ea",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 1360,
        "wires": [
            [
                "eff22ca85a0c4374"
            ],
            []
        ]
    },
    {
        "id": "d5426f7c462b834f",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('start_number') || 0;\nflow.get('img_number') || 0;\n\nvar input_1 = flow.get('sc1');\nvar input_2 = flow.get('Dir')-1;\nvar input_3 = flow.get('Model')-1;\nvar input_4 = flow.get('dir_list');\nvar input_5 = flow.get('model_list');\nvar input_6 = JSON.parse(msg.payload);\nflow.set('start_number', input_6[0]);\nflow.set('img_number', input_6[0]-1);\n\nvar dir_name = input_4[input_2];\nvar model_name = input_5[input_3];\nvar root_path = input_1[input_2][dir_name][input_3][model_name];\n\nstr = \"Hip Hip Hooray!\\n\\r\";\nstr += \"Your chosen directory is \\n\\r<<\\n\\r\" + dir_name + \"\\n\\r>>\\n\\r\";\nstr += \"Your chosen model is \\n\\r<<\\n\\r\" + model_name + \"\\n\\r>>\\n\\n\\r\";\nstr += \"Now, you may upload your custom test image by following the instruction below.\\n\\n\\r\";\nstr += \"___Image Upload Instruction___\\n\\r\";\nstr += \"1. Before uploading any test image, please use the command /Clear and '/Save yes'.\\n\\n\\r\";\nstr += \"2. Attach an image from your photo library.\\n\\n\\r\";\nstr += \"___Important Note___\\n\\r\";\nstr += \"The image saving and evaluation mode (step 1) will be continuous. You need to type command '/Save no' to kill the mode.\\n\\r\"\n\nvar output = {\n    content:str,\n    type:'message',\n    chatId: flow.get('chatId')\n};\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1300,
        "wires": [
            [
                "30ee56565037357d"
            ]
        ]
    },
    {
        "id": "27e1c6b0149bc6bf",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "python",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "script 2",
        "x": 660,
        "y": 1280,
        "wires": [
            [
                "d5426f7c462b834f",
                "0be4d9b2666a3892"
            ],
            [
                "0be4d9b2666a3892"
            ],
            [
                "0be4d9b2666a3892"
            ]
        ]
    },
    {
        "id": "eff22ca85a0c4374",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('server_url') || 0;\nflow.get('node_red_dir') || 0;\nflow.get('label_map_path') || 0;\nflow.get('temp_img') || 0;\nflow.get('model_name') || 0;\nflow.get('grpc_port') || 0;\nflow.get('server_name') || 0;\n\nvar input_1 = flow.get('sc1');\nvar input_2 = flow.get('Dir')-1;\nvar input_3 = flow.get('Model')-1;\nvar input_4 = flow.get('dir_list');\nvar input_5 = flow.get('model_list');\nvar node_red_script_dir = flow.get('Node-RED-script-dir');\n\nvar dir_name = input_4[input_2];\nvar model_name = input_5[input_3];\nvar root_path = input_1[input_2][dir_name][input_3][model_name];\n\nattr = ['server_url', 'node_red_directory', 'label_map_file_path', 'grpc_port', 'server_name'];\nflow.set('server_url', root_path[attr[0]]);\nflow.set('node_red_dir', root_path[attr[1]]);\nflow.set('label_map_path', root_path[attr[2]]);\nflow.set('model_name', model_name);\nflow.set('grpc_port', root_path[attr[3]]);\nflow.set('server_name', root_path[attr[4]]);\n\nvar node_red_dir = flow.get('node_red_dir');\nvar str = node_red_script_dir + \"script_2.py\" + \" \" + \"-t \" + node_red_dir;\n\nmsg.payload = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1280,
        "wires": [
            [
                "27e1c6b0149bc6bf",
                "da15e86cbb677c77"
            ]
        ]
    },
    {
        "id": "30ee56565037357d",
        "type": "telegram sender",
        "z": "83ce028f10c839ea",
        "name": "",
        "bot": "e2a00462eac7bac3",
        "haserroroutput": false,
        "outputs": 1,
        "x": 850,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "94d733fc82f4ba83",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var save_status = flow.get('Save');\nvar img_name = flow.get('img_name2');\nvar img_name_list = flow.get('img_name_list');\n\nif (save_status=='yes')\n{\n    str = \"Well Done!\\n\\r\";\n    str += \"You have uploaded image\\n\\r<<\\n\\r\";\n    for (let i=0; i<img_name_list.length; i++)\n    {\n        str += img_name_list[i] + \"\\n\\r\";\n    }\n    str += \">>\\n\\n\\r\";\n    str += \"Once you are done uploading all your images, follow the instruction below to start evaluation process. Otherwise, you may continue uploading your test image.\\n\\n\\r\";\n    str += \"___Evaluation Instruction___\\n\\r\";\n    str += \"Step 1: Type the command /Save no.\\n\\r\";\n    str += \"Step 2: Type the command /Eval to start evaluation process.\\n\\n\\r\";\n    str += \"___Take Note___\\n\\rThe following command is only applicable to any images uploaded after the most recent '/Save yes' command:\\n\\r<<<\\n\\r\";\n    str += \"/List --> to check the list of uploaded images\\n\\r\";\n    str += \"/Del --> to delete the all uploaded images.\\n\\r>>>\\n\\n\\r\";\n}\n\nelse \n{\n    flow.set('img_name_list', [])\n    str = \"___Warning___\\n\\rThe image you have uploaded will not be saved and evaluated.\\n\\r\";\n    str += \"To ensure that your image is saved and evaluated, please type the command /Save yes.\\n\\r\";\n    str += \"To ensure that your image is NOT saved and evaluated, please type the command /Save no.\\n\\r\";\n}\n\nvar output = {\n    content:str,\n    type:'message',\n    chatId: flow.get('chatId')\n};\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 2100,
        "wires": [
            [
                "f967e49b218ee996"
            ]
        ]
    },
    {
        "id": "708ea1a8133856b4",
        "type": "telegram command",
        "z": "83ce028f10c839ea",
        "name": "",
        "command": "/Save",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e2a00462eac7bac3",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 90,
        "y": 1920,
        "wires": [
            [
                "8680313e54ba57d6"
            ],
            []
        ]
    },
    {
        "id": "8680313e54ba57d6",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('Save') || 'yes';\nflow.get('img_name_list') || [];\n\nvar input = msg.payload.content;\nvar split_input = input.split(\" \")[1];\nvar save_status = flow.set('Save', split_input);\n\nmsg.payload = flow.get('Save');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1920,
        "wires": [
            [
                "5572ff6a5733abf2"
            ]
        ]
    },
    {
        "id": "f967e49b218ee996",
        "type": "telegram sender",
        "z": "83ce028f10c839ea",
        "name": "",
        "bot": "e2a00462eac7bac3",
        "haserroroutput": false,
        "outputs": 1,
        "x": 790,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "4fed09eb7ba5e6c2",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var save_status = flow.get('Save');\nvar check = \"\";\nif (save_status==\"yes\")\n{\n    check = true;\n}\nelse \n{\n    check = false;\n}\nmsg.payload = check;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2160,
        "wires": [
            [
                "02e048d07b3936ab"
            ]
        ]
    },
    {
        "id": "02e048d07b3936ab",
        "type": "switch",
        "z": "83ce028f10c839ea",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 2160,
        "wires": [
            [
                "8f8e7b48e0d87495",
                "729d2df6c0406727"
            ],
            []
        ]
    },
    {
        "id": "1ab5118dfb7b3420",
        "type": "telegram command",
        "z": "83ce028f10c839ea",
        "name": "",
        "command": "/Del",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e2a00462eac7bac3",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 90,
        "y": 1720,
        "wires": [
            [
                "e662f238af43f965",
                "25c2161a63644e0c"
            ],
            []
        ]
    },
    {
        "id": "e662f238af43f965",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var directory = flow.get('node_red_dir');\nvar node_red_script_dir = flow.get('Node-RED-script-dir');\nvar script_dir = node_red_script_dir + \"script_4.py \"\nvar img_dir = directory + \"temp_img\"; \n\nmsg.payload = script_dir + '-n ' + img_dir;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1720,
        "wires": [
            [
                "eb5d36ab0a720290"
            ]
        ]
    },
    {
        "id": "8e68aa193030cd7f",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var img_name_list = flow.get('img_name_list') || [];\nvar str = \"\";\nif (!img_name_list.length){\n    str += \"Hello, the uploaded image list is currently empty.\\n\\r\";\n}\nelse{\n    str += \"Hello, the images listed below has been removed from the evaluation list\\n\\r\";\n    str += \"<<<\\n\";\n    for (let i=0; i<img_name_list.length; i++){\n        str += img_name_list[i] + \"\\n\";\n    }\n    str += \">>>\\n\"\n}\nflow.set('img_name_list', []);\n\nvar output = {\n    content:str,\n    type:'message',\n    chatId: flow.get('chatId')\n};\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1720,
        "wires": [
            [
                "734c2ea655fbc960"
            ]
        ]
    },
    {
        "id": "734c2ea655fbc960",
        "type": "telegram sender",
        "z": "83ce028f10c839ea",
        "name": "",
        "bot": "e2a00462eac7bac3",
        "haserroroutput": false,
        "outputs": 1,
        "x": 790,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "64925c741193ae96",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('img_name_list') || [];\n\nvar img_name_list = flow.get('img_name_list');\nvar node_red_script_dir = flow.get('Node-RED-script-dir');\nvar str = \"\";\n\nstr = node_red_script_dir + \"script_3.py \";\nstr += \"-u \" + flow.get('server_url');\nstr += \" -n \" + flow.get('node_red_dir');\nstr += \" -l \" + flow.get('label_map_path');\nstr += \" -m \" + flow.get('server_name');\nstr += \" -g \" + flow.get('grpc_port');\nstr += \" -i\";\n\nfor (let u=0; u<img_name_list.length; u++)\n{\n    str += \" \" + img_name_list[u];\n}\n \nmsg.payload = str;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1560,
        "wires": [
            [
                "46f956f915d9932a",
                "0f7b57ab1925ef42"
            ]
        ]
    },
    {
        "id": "0f7b57ab1925ef42",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "python ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "script 3",
        "x": 560,
        "y": 1560,
        "wires": [
            [
                "60d2fdedf5781dca"
            ],
            [
                "60d2fdedf5781dca"
            ],
            [
                "60d2fdedf5781dca"
            ]
        ]
    },
    {
        "id": "60d2fdedf5781dca",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1560,
        "wires": []
    },
    {
        "id": "08250f026f4cead3",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 110,
        "y": 860,
        "wires": []
    },
    {
        "id": "6926974dfe22596b",
        "type": "comment",
        "z": "83ce028f10c839ea",
        "name": "Telegram Bot Flow",
        "info": "Emoji code:\nhttps://apps.timwhitlock.info/emoji/tables/unicode",
        "x": 110,
        "y": 800,
        "wires": []
    },
    {
        "id": "7004f5833e184e95",
        "type": "telegram command",
        "z": "83ce028f10c839ea",
        "name": "",
        "command": "/Eval",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e2a00462eac7bac3",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 90,
        "y": 1600,
        "wires": [
            [
                "64925c741193ae96",
                "f6becd466e61aac2"
            ],
            []
        ]
    },
    {
        "id": "f6becd466e61aac2",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var str = \"You are almost there!\\n\\n\\r\"\nstr += \"🚀🚀🚀 The model is evaluating and counting right now. 🚀🚀🚀\\n\\n\\r\";\nstr += \"In the meantime, please sit back and relax while waiting for Jarvis to reply you. 🍹 🍺\\n\\r\"\n\n\nvar output = {\n    content:str,\n    type:'message',\n    chatId: flow.get('chatId')\n};\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1620,
        "wires": [
            [
                "0e0db518100afd4e"
            ]
        ]
    },
    {
        "id": "0e0db518100afd4e",
        "type": "telegram sender",
        "z": "83ce028f10c839ea",
        "name": "",
        "bot": "e2a00462eac7bac3",
        "haserroroutput": false,
        "outputs": 1,
        "x": 590,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "8f8e7b48e0d87495",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var img_name_list = flow.get('img_name_list');\n\nmsg.payload = img_name_list;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 2140,
        "wires": [
            [
                "060ebf740d16e596"
            ]
        ]
    },
    {
        "id": "060ebf740d16e596",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 2160,
        "wires": []
    },
    {
        "id": "18b61a39cb2b65de",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('start_number') || 0;\nflow.get('img_number') || 0;\n\nvar input = JSON.parse(msg.payload);\nflow.set('start_number', input[0]);\nflow.set('img_number', input[0]-1);\n\nmsg.payload = flow.get('img_name_list');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "590838d96fca98b6",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 2380,
        "wires": []
    },
    {
        "id": "46f956f915d9932a",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1500,
        "wires": []
    },
    {
        "id": "069babdbf8676830",
        "type": "telegram command",
        "z": "83ce028f10c839ea",
        "name": "",
        "command": "/List",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e2a00462eac7bac3",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 730,
        "y": 1440,
        "wires": [
            [
                "16a1a0392965bcbe"
            ],
            []
        ]
    },
    {
        "id": "16a1a0392965bcbe",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('img_name_list') || [];\nvar name_list = flow.get('img_name_list');\n\nstr = \"Uploaded Image List:\\n\\r<<\\n\\r\";\nfor (let i=0; i<name_list.length; i++)\n{\n    str += name_list[i] + \"\\n\\r\";\n}\nstr += \">>\\n\\r\"\n\nvar output = {\n    content:str,\n    type:'message',\n    chatId: flow.get('chatId')\n};\n\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1440,
        "wires": [
            [
                "e96aad963eb6544b"
            ]
        ]
    },
    {
        "id": "e96aad963eb6544b",
        "type": "telegram sender",
        "z": "83ce028f10c839ea",
        "name": "",
        "bot": "e2a00462eac7bac3",
        "haserroroutput": false,
        "outputs": 1,
        "x": 870,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "cce59db201b77f29",
        "type": "mqtt in",
        "z": "83ce028f10c839ea",
        "name": "mqtt-subscribe",
        "topic": "img",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ad5a4202cef0248",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 160,
        "y": 280,
        "wires": [
            [
                "d165a441a2e41aa8",
                "adee231b6593051b"
            ]
        ]
    },
    {
        "id": "d165a441a2e41aa8",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 280,
        "wires": []
    },
    {
        "id": "adee231b6593051b",
        "type": "base64",
        "z": "83ce028f10c839ea",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 320,
        "y": 320,
        "wires": [
            [
                "0b9970948d074d3b"
            ]
        ]
    },
    {
        "id": "0b9970948d074d3b",
        "type": "jimp-image",
        "z": "83ce028f10c839ea",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 490,
        "y": 320,
        "wires": [
            [
                "c4d9ad51897dfd06"
            ]
        ]
    },
    {
        "id": "c4d9ad51897dfd06",
        "type": "image viewer",
        "z": "83ce028f10c839ea",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "active": true,
        "x": 630,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "366e39620b272b8e",
        "type": "mqtt in",
        "z": "83ce028f10c839ea",
        "name": "mqtt-subscribe",
        "topic": "all_img_data",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ad5a4202cef0248",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 120,
        "y": 2860,
        "wires": [
            [
                "8f446bc57b415972",
                "5a55ed78a9595596"
            ]
        ]
    },
    {
        "id": "24dd700ee5e50c73",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('mqtt_single_img_result') || 0;\nvar input = JSON.parse(msg.payload);\nvar input_key = Object.keys(input)[0];\nvar img_path = input[input_key]['abs_path'];\nflow.set('mqtt_single_img_result', input);\nmsg.filename = img_path;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 3060,
        "wires": [
            [
                "cb694d5d4a469a98"
            ]
        ]
    },
    {
        "id": "cb694d5d4a469a98",
        "type": "file in",
        "z": "83ce028f10c839ea",
        "name": "load image",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 3080,
        "wires": [
            [
                "bcdade3d9ceacb84"
            ]
        ]
    },
    {
        "id": "bcdade3d9ceacb84",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "send picture",
        "func": "var input = flow.get('mqtt_single_img_result');\nvar img_name = Object.keys(input)[0];\nvar str = 'Hip Hip Hooray!\\n\\r';\nstr += 'Below shows the detail of evaluated result for:\\n\\r';\nstr += '1. Image name --> ' + img_name + '\\n\\r2. Class Count -->\\n\\r{\\n\\r';\nclass_list = Object.keys(input[img_name]['class']);\n\nfor (let i=0; i<class_list.length; i++)\n{\n    str += \"    \" + class_list[i] + ' : ' + String(input[img_name]['class'][class_list[i]]) + \"\\n\\r\";\n}\nstr += '}\\n\\n\\r';\nstr += \"___Important Note___\\n\\r\";\nstr += \"Please verify the count by replying this message as shown below:\\n\\r\";\nstr += \"'/Ver \" + img_name + \" yes' OR '/Ver \" + img_name + \" no'\";\n\nvar pl = {\n  content: msg.payload,\n//  message: str,\n  type : 'photo',\n  caption: str,\n  chatId: flow.get('chatId'),\n//  chat: msg.originalMessage.chat,\n//  from: msg.originalMessage.from,\n//  message_id : msg.originalMessage.message_id\n}\n\nmsg.payload = pl;\n\n\n/* type can be one of the following\nphoto\naudio\nvideo\nsticker\nvoice\ndocument\n*/\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 3060,
        "wires": [
            [
                "be904b6352d9c2f0"
            ]
        ]
    },
    {
        "id": "be904b6352d9c2f0",
        "type": "telegram sender",
        "z": "83ce028f10c839ea",
        "name": "",
        "bot": "e2a00462eac7bac3",
        "haserroroutput": false,
        "outputs": 1,
        "x": 810,
        "y": 3060,
        "wires": [
            []
        ]
    },
    {
        "id": "094761c234c03591",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 2860,
        "wires": []
    },
    {
        "id": "8f446bc57b415972",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var input = JSON.parse(msg.payload);\nmsg.payload = input;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2860,
        "wires": [
            [
                "094761c234c03591"
            ]
        ]
    },
    {
        "id": "0ef5889edb82a5d6",
        "type": "mqtt in",
        "z": "83ce028f10c839ea",
        "name": "mqtt-sunscribe",
        "topic": "single_img_data",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ad5a4202cef0248",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 120,
        "y": 3040,
        "wires": [
            [
                "eadfcc376f356d12",
                "24dd700ee5e50c73",
                "88681c695bf1b06d"
            ]
        ]
    },
    {
        "id": "bf88554d18778fa0",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 2980,
        "wires": []
    },
    {
        "id": "eadfcc376f356d12",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var input = JSON.parse(msg.payload);\nmsg.payload = input;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2980,
        "wires": [
            [
                "bf88554d18778fa0"
            ]
        ]
    },
    {
        "id": "f7210f4ce3187c3d",
        "type": "comment",
        "z": "83ce028f10c839ea",
        "name": "Node-red Dashboard Flow",
        "info": "",
        "x": 150,
        "y": 3960,
        "wires": []
    },
    {
        "id": "176c38c6f3fea81a",
        "type": "comment",
        "z": "83ce028f10c839ea",
        "name": "Test Zone",
        "info": "",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "5a55ed78a9595596",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 2800,
        "wires": []
    },
    {
        "id": "88681c695bf1b06d",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 2940,
        "wires": []
    },
    {
        "id": "e09223d6f38b9245",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "bla",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1100,
        "wires": []
    },
    {
        "id": "0be4d9b2666a3892",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "bla",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1240,
        "wires": []
    },
    {
        "id": "04bc7b388f096709",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('Node-RED-script-dir') || 0;\nflow.get('chatId') || 0;\nvar chatId_list = [1902329739,1963528705];\nflow.set('chatId', chatId_list);\nflow.set('Node-RED-script-dir', 'D:/Program_Files/VisualStudio2019/convert_base64_to_jpg/Node_RED_Project/');\n\nvar dir = flow.get('Node-RED-script-dir') + 'script_0.py';\n\nmsg.payload = dir\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 860,
        "wires": [
            [
                "f5c3d97965272582"
            ]
        ]
    },
    {
        "id": "f5c3d97965272582",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "python",
        "addpay": "payload",
        "append": "-s D:/my_dir/streamlit_user_directory",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "script 0",
        "x": 480,
        "y": 860,
        "wires": [
            [
                "dbed5a1e1e859af1"
            ],
            [
                "dbed5a1e1e859af1"
            ],
            [
                "dbed5a1e1e859af1",
                "f7fef2143fc5e80a"
            ]
        ]
    },
    {
        "id": "dbed5a1e1e859af1",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 840,
        "wires": []
    },
    {
        "id": "eb5d36ab0a720290",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "python ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "script 4",
        "x": 400,
        "y": 1720,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "25c2161a63644e0c",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var node_red_script_dir = flow.get('Node-RED-script-dir');\nvar node_red_dir = flow.get('node_red_dir');\nvar str = node_red_script_dir + \"script_2.py\" + \" \" + \"-t \" + node_red_dir;\n\nmsg.payload = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1780,
        "wires": [
            [
                "db8126f108a26799"
            ]
        ]
    },
    {
        "id": "8cc1d894af64655f",
        "type": "telegram command",
        "z": "83ce028f10c839ea",
        "name": "",
        "command": "/Clear",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e2a00462eac7bac3",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 90,
        "y": 1780,
        "wires": [
            [
                "e662f238af43f965",
                "25c2161a63644e0c",
                "be79ba4e4e1a6516"
            ],
            []
        ]
    },
    {
        "id": "db8126f108a26799",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "python",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "script 2",
        "x": 400,
        "y": 1780,
        "wires": [
            [
                "8e68aa193030cd7f",
                "18b61a39cb2b65de"
            ],
            [],
            []
        ]
    },
    {
        "id": "be79ba4e4e1a6516",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('Save') || 'no';\nflow.set('Save', 'no');\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "5572ff6a5733abf2",
        "type": "switch",
        "z": "83ce028f10c839ea",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "yes",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "no",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 1920,
        "wires": [
            [
                "687e310c7f1dd431"
            ],
            [
                "f1fc5d049b09a2bc",
                "70836a10568daf7f"
            ]
        ]
    },
    {
        "id": "f1fc5d049b09a2bc",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var str = \"___Important Note___\\n\\r\";\nstr += \"All images uploaded from now on will NOT be saved for evaluation purpose.\\n\"\n\nvar output = {\n    content:str,\n    type:'message',\n    chatId: flow.get('chatId')\n};\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1880,
        "wires": [
            [
                "65ea9654f537c851"
            ]
        ]
    },
    {
        "id": "65ea9654f537c851",
        "type": "telegram sender",
        "z": "83ce028f10c839ea",
        "name": "",
        "bot": "e2a00462eac7bac3",
        "haserroroutput": false,
        "outputs": 1,
        "x": 770,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "2c4bcade55b672ec",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "python",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "script 5",
        "x": 740,
        "y": 1940,
        "wires": [
            [
                "3957a762ffcb2691"
            ],
            [
                "3957a762ffcb2691"
            ],
            [
                "3957a762ffcb2691"
            ]
        ]
    },
    {
        "id": "70836a10568daf7f",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var node_red_script_dir = flow.get('Node-RED-script-dir');\nvar node_red_dir = flow.get('node_red_dir');\nvar str = node_red_script_dir + \"script_5.py\" + \" \" + \"-n \" + node_red_dir;\n\nmsg.payload = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1940,
        "wires": [
            [
                "2c4bcade55b672ec"
            ]
        ]
    },
    {
        "id": "3957a762ffcb2691",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1940,
        "wires": []
    },
    {
        "id": "687e310c7f1dd431",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var str = \"___Important Note___\\n\\r\";\nstr += \"All images uploaded from now on will be saved for evaluation purpose.\\n\"\n\nvar output = {\n    content:str,\n    type:'message',\n    chatId: flow.get('chatId')\n};\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1840,
        "wires": [
            [
                "65ea9654f537c851"
            ]
        ]
    },
    {
        "id": "3da2b7f9cd14206d",
        "type": "telegram command",
        "z": "83ce028f10c839ea",
        "name": "",
        "command": "/Help",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e2a00462eac7bac3",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 90,
        "y": 1440,
        "wires": [
            [
                "83498a7b9af1c8cb"
            ],
            []
        ]
    },
    {
        "id": "83498a7b9af1c8cb",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var str = \"👼 Hello there, I am Jarvis. Nice to meet you. 👼\\n\\r\";\nstr += \"Below is a list of command you may use to get started.\\n\\n\\r\";\nstr += \"<<<\\n\\r\";\nstr += \"    /Hi  -->  Gives an introduction on how to get started.\\n\\r\";\nstr += \"    /Dir --> Choose a dataset.\\n\\r\";\nstr += \"    /Model --> Choose a trained model.\\n\\r\";\nstr += \"    /Save yes --> All uploaded image will be saved.\\n\\r\";\nstr += \"    /Save no --> All uploaded image will not be saved.\\n\\r\";\nstr += \"    /List --> AList out all uploaded images.\\n\\r\";\nstr += \"    /Clear --> Remove upoaded all images and set to '/Save no' mode.\\n\\r\";\nstr += \"    /Del --> Remove all upoaded images during '/Save yes' mode.\\n\\r\";\nstr += \">>>\\n\\r\";\n\nvar output = {\n    content:str,\n    type:'message',\n    chatId: flow.get('chatId')\n};\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1440,
        "wires": [
            [
                "b0a7c7f5d3dca72b"
            ]
        ]
    },
    {
        "id": "b0a7c7f5d3dca72b",
        "type": "telegram sender",
        "z": "83ce028f10c839ea",
        "name": "",
        "bot": "e2a00462eac7bac3",
        "haserroroutput": false,
        "outputs": 1,
        "x": 470,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "57db513bcee4062a",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 3280,
        "wires": []
    },
    {
        "id": "c1b1aca40fd1097e",
        "type": "mqtt in",
        "z": "83ce028f10c839ea",
        "name": "mqtt-sunscribe",
        "topic": "single_img_data",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ad5a4202cef0248",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 120,
        "y": 3180,
        "wires": [
            [
                "576fbbb8945b0512"
            ]
        ]
    },
    {
        "id": "82588f5791dbc9e3",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var input = msg.payload.content;\nvar str_list = input.split(\" \");\nvar img_name = str_list[1];\nvar remark = str_list[2];\n\nvar directory = flow.get('node_red_dir');\nvar node_red_script_dir = flow.get('Node-RED-script-dir');\nvar script_dir = node_red_script_dir + \"script_6.py \"\n\nvar str = script_dir + \"-n \" + directory + \" -i \" + img_name + \" -r \" + remark;\nmsg.payload = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 3260,
        "wires": [
            [
                "ce2b31d5bf5d269b"
            ]
        ]
    },
    {
        "id": "576fbbb8945b0512",
        "type": "switch",
        "z": "83ce028f10c839ea",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "done",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "229b67545904d2ce",
        "type": "telegram command",
        "z": "83ce028f10c839ea",
        "name": "",
        "command": "/Ver",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e2a00462eac7bac3",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 90,
        "y": 3260,
        "wires": [
            [
                "82588f5791dbc9e3"
            ],
            []
        ]
    },
    {
        "id": "ce2b31d5bf5d269b",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "python",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "script 6",
        "x": 420,
        "y": 3260,
        "wires": [
            [
                "57db513bcee4062a",
                "063fbb3d1c2c05a8"
            ],
            [
                "57db513bcee4062a"
            ],
            [
                "57db513bcee4062a"
            ]
        ]
    },
    {
        "id": "063fbb3d1c2c05a8",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var str = \"\\n\\r👾 Thank you for the verification! 👾\\n\\r\";\n\nvar output = {\n    content:str,\n    type:'message',\n    chatId: flow.get('chatId')\n};\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 3240,
        "wires": [
            [
                "0c8a9ebc4cb55990"
            ]
        ]
    },
    {
        "id": "0c8a9ebc4cb55990",
        "type": "telegram sender",
        "z": "83ce028f10c839ea",
        "name": "",
        "bot": "e2a00462eac7bac3",
        "haserroroutput": false,
        "outputs": 1,
        "x": 750,
        "y": 3240,
        "wires": [
            [
                "b8fb8f56dc0c4eb7"
            ]
        ]
    },
    {
        "id": "f1b223761d7cbb85",
        "type": "inject",
        "z": "83ce028f10c839ea",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 290,
        "y": 780,
        "wires": [
            [
                "04bc7b388f096709"
            ]
        ]
    },
    {
        "id": "3484bbb9e0836b94",
        "type": "ui_dropdown",
        "z": "83ce028f10c839ea",
        "name": "",
        "label": "Choose dataset: ",
        "tooltip": "",
        "place": "select options",
        "group": "19aa4f19b70241ed",
        "order": 1,
        "width": 7,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 780,
        "y": 4160,
        "wires": [
            [
                "4d834d66a8f41155"
            ]
        ]
    },
    {
        "id": "a35b898ff74387f9",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('Node-RED-script-dir') || 0;\nflow.get('chatId') || 0;\nvar chatId_list = [1902329739];\nflow.set('chatId', chatId_list);\nflow.set('Node-RED-script-dir', 'D:/Program_Files/VisualStudio2019/convert_base64_to_jpg/Node_RED_Project/');\n\nvar dir = flow.get('Node-RED-script-dir') + 'script_1.py';\n\nmsg.payload = dir\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 4160,
        "wires": [
            [
                "3989ef961d740c7c"
            ]
        ]
    },
    {
        "id": "3989ef961d740c7c",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "python",
        "addpay": "payload",
        "append": "-u D:/my_dir/streamlit_user_directory",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "script 1",
        "x": 460,
        "y": 4160,
        "wires": [
            [
                "1c532e64b0e883f8"
            ],
            [],
            [
                "d5e8d12687c010f2"
            ]
        ]
    },
    {
        "id": "1c532e64b0e883f8",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('ui_dataset_list') || 0;\nflow.get('sc1') || 0;\nflow.set('sc1', JSON.parse(msg.payload))\n\nvar input_1 = flow.get('sc1');\nvar list = [];\nfor (let i=0; i<input_1.length; i++)\n{\n    var key = String(Object.keys(input_1[i])[0]);\n    list.push(key);\n}\nflow.set('ui_dataset_list', list)\n\nmsg.options = flow.get('ui_dataset_list');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 4160,
        "wires": [
            [
                "3484bbb9e0836b94"
            ]
        ]
    },
    {
        "id": "4d834d66a8f41155",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('ui_model_list') || 0;\nflow.set('ui_dataset_name', msg.payload);\nvar dataset_name = \"\";\n\nvar input_1 = flow.get('sc1');\nvar input_2 = msg.payload; // dataset name\nvar input_3 = flow.get('ui_dataset_list');\nvar model_list = [];\n\nfor (let i=0; i<input_3.length; i++)\n{\n    dataset_name = String(Object.keys(input_1[i])[0]);\n    model_array = input_1[i][dataset_name]\n    for (let k=0; k<model_array.length; k++)\n    {\n        model_name = Object.keys(model_array[k])[0];\n        model_list.push(model_name);\n    }\n}\nflow.set('ui_model_list', model_list)\n\nmsg.payload = flow.get('ui_dataset_name')\nmsg.options = flow.get('ui_model_list');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 4200,
        "wires": [
            [
                "be57e630eb01aa0b",
                "b38eb9cd8bc3b4a3"
            ]
        ]
    },
    {
        "id": "f269d6f4ffa6b940",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "python",
        "addpay": "payload",
        "append": "-s D:/my_dir/streamlit_user_directory",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "script 7",
        "x": 460,
        "y": 4100,
        "wires": [
            [
                "d5e8d12687c010f2",
                "a9caa60ba98c4cfe"
            ],
            [
                "d5e8d12687c010f2"
            ],
            [
                "d5e8d12687c010f2"
            ]
        ]
    },
    {
        "id": "b8fb8f56dc0c4eb7",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('Node-RED-script-dir') || 0;\nflow.set('Node-RED-script-dir', 'D:/Program_Files/VisualStudio2019/convert_base64_to_jpg/Node_RED_Project/');\n\nvar dir = flow.get('Node-RED-script-dir') + 'script_7.py';\n\nmsg.payload = dir\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 4100,
        "wires": [
            [
                "f269d6f4ffa6b940"
            ]
        ]
    },
    {
        "id": "d5e8d12687c010f2",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 4100,
        "wires": []
    },
    {
        "id": "a9caa60ba98c4cfe",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('user_avg_acc') || 0;\nflow.get('user_avg_dt') || 0;\nflow.get('user_avg_rt') || 0;\nflow.get('user_avg_usg') || 0;\nflow.get('user_model_log') || 0;\nflow.get('user_file_change') || false;\nflow.get('msg_bool') || false;\n\nconst csv = global.get('csvParser');\nconst fs = global.get('fs');\nvar user_csv_path = 'D:/my_dir/user_csv/user_model_log.csv';\nvar input_dataset = flow.get('ui_dataset_name');\nconst result = {};\nconst user_avg_acc = [];\nconst user_avg_dt = [];\nconst user_avg_rt = [];\nconst user_avg_usg = [];\nconst user_model_name = [];\n\nif (input_dataset!=undefined || input_dataset!=null){\n    try{\n    if (fs.existsSync(user_csv_path)){\n        msg.payload = \"CSV file exists.\";\n        node.send(msg);\n        }\n    }\n    catch(err){\n        node.log(\"Error 1:\\n\\r\")\n        node.error(err)\n    }\n    \n    try{\n                         \n        stream = fs.createReadStream(user_csv_path)\n          .pipe(csv())\n          .on('data', (row) => {\n              const headers = Object.keys(row);\n              if (row['Dataset']==input_dataset){\n                  len = row[headers[1]].split(\"_\").length\n                  user_model_name.push(row[headers[1]].split(\"-\")[0] + \"_\" + row[headers[1]].split(\"_\")[len-1]);\n                  user_avg_acc.push(Number(row[headers[2]]*100));\n                  user_avg_dt.push(Number(row[headers[3]]));\n                  user_avg_rt.push(Number(row[headers[4]]));\n                  user_avg_usg.push(Number(row[headers[5]]));\n              }\n              obj_output = {\n                  'user_model_name': user_model_name,\n                  'user_avg_acc': user_avg_acc,\n                  'user_avg_dt': user_avg_dt,\n                  'user_avg_rt': user_avg_rt,\n                  'user_avg_usg': user_avg_usg\n              };\n              Object.assign(result, obj_output);\n           })\n          .on('end', () => {\n              console.log('CSV file successfully processed');\n              msg.payload = result;\n              node.send(msg);\n              flow.set('user_model_log', result);\n           });\n    }\n    catch(err){\n        node.log(\"Error 2\")\n        node.log(err);\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nmsg.payload = \"DONE ^^\";\nreturn msg",
        "libs": [],
        "x": 320,
        "y": 4220,
        "wires": [
            [
                "6965c7c7dd84bc0f",
                "37417b1c54b7d2a2",
                "6db07af328a6c164",
                "0f28d719db1f1d8c"
            ]
        ]
    },
    {
        "id": "a080d6c9db795bab",
        "type": "ui_chart",
        "z": "83ce028f10c839ea",
        "name": "",
        "group": "19aa4f19b70241ed",
        "order": 9,
        "width": 28,
        "height": 9,
        "label": "Average Accuracy of Models (%)",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Loading",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#26a7df",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 670,
        "y": 4340,
        "wires": [
            []
        ]
    },
    {
        "id": "be57e630eb01aa0b",
        "type": "ui_text",
        "z": "83ce028f10c839ea",
        "group": "19aa4f19b70241ed",
        "order": 4,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Dataset: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 920,
        "y": 4220,
        "wires": []
    },
    {
        "id": "5876ced212f22ffc",
        "type": "inject",
        "z": "83ce028f10c839ea",
        "name": "Manual Start Here",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 4120,
        "wires": [
            [
                "b8fb8f56dc0c4eb7",
                "a35b898ff74387f9",
                "aa5d482aba7bb1c4"
            ]
        ]
    },
    {
        "id": "091d3c652f4bcc57",
        "type": "watch",
        "z": "83ce028f10c839ea",
        "name": "",
        "files": "D:\\\\my_dir\\\\user_csv\\\\streamlit_model_performance.csv",
        "recursive": "",
        "x": 220,
        "y": 4260,
        "wires": [
            [
                "441e6d39a320c6d0"
            ]
        ]
    },
    {
        "id": "aa5d482aba7bb1c4",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('st_avg_acc') || 0;\nflow.get('st_avg_dt') || 0;\nflow.get('st_avg_rt') || 0;\nflow.get('st_avg_usg') || 0;\nflow.get('st_model_log') || 0;\n\nconst csv = global.get('csvParser');\nconst fs = global.get('fs');\nvar user_csv_path = 'D:/my_dir/user_csv/streamlit_model_performance.csv';\nvar input_dataset = flow.get('ui_dataset_name');\nconst result = {};\nconst st_avg_acc = [];\nconst st_avg_dt = [];\nconst st_avg_rt = [];\nconst st_avg_usg = [];\nconst st_model_name = [];\n\nif (input_dataset!=undefined || input_dataset!=null){\n    try{\n    if (fs.existsSync(user_csv_path)){\n        msg.payload = \"CSV file exists.\";\n        node.send(msg);\n        }\n    }\n    catch(err){\n        node.log(\"Error 1:\\n\\r\")\n        node.error(err)\n    }\n    \n    try{\n                         \n        stream = fs.createReadStream(user_csv_path)\n          .pipe(csv())\n          .on('data', (row) => {\n              const headers = Object.keys(row);\n              if (row['Dataset']==input_dataset){\n                  len = row[headers[1]].split(\"_\").length\n                  st_model_name.push(row[headers[1]].split(\"-\")[0] + \"_\" + row[headers[1]].split(\"_\")[len-1]);\n                  st_avg_acc.push(Number(row[headers[2]]*100));\n                  st_avg_dt.push(Number(row[headers[5]]));\n              }\n              obj_output = {\n                  'st_model_name': st_model_name,\n                  'st_avg_acc': st_avg_acc,\n                  'st_avg_dt': st_avg_dt,\n              };\n              Object.assign(result, obj_output);\n           })\n          .on('end', () => {\n              console.log('CSV file successfully processed');\n              msg.payload = result;\n              node.send(msg);\n              flow.set('st_model_log', result);\n           });\n    }\n    catch(err){\n        node.log(\"Error 2\")\n        node.log(err);\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 4040,
        "wires": [
            [
                "fb6ec63b838b61ab"
            ]
        ]
    },
    {
        "id": "b38eb9cd8bc3b4a3",
        "type": "ui_button",
        "z": "83ce028f10c839ea",
        "name": "",
        "group": "19aa4f19b70241ed",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "submit",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 4440,
        "wires": [
            [
                "a9caa60ba98c4cfe"
            ]
        ]
    },
    {
        "id": "d713630f8776b765",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "msg.payload = flow.get('ui_dataset_name');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 4240,
        "wires": [
            [
                "be57e630eb01aa0b"
            ]
        ]
    },
    {
        "id": "441e6d39a320c6d0",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('st_avg_acc') || 0;\nflow.get('st_avg_dt') || 0;\nflow.get('st_avg_rt') || 0;\nflow.get('st_avg_usg') || 0;\nflow.get('st_model_log') || 0;\n\nconst csv = global.get('csvParser');\nconst fs = global.get('fs');\nvar user_csv_path = 'D:/my_dir/user_csv/streamlit_model_performance.csv';\nvar input_dataset = flow.get('ui_dataset_name');\nconst result = {};\nconst st_avg_acc = [];\nconst st_avg_dt = [];\nconst st_avg_rt = [];\nconst st_avg_usg = [];\nconst st_model_name = [];\n\nif (input_dataset!=undefined || input_dataset!=null){\n    try{\n    if (fs.existsSync(user_csv_path)){\n        msg.payload = \"CSV file exists.\";\n        node.send(msg);\n        }\n    }\n    catch(err){\n        node.log(\"Error 1:\\n\\r\")\n        node.error(err)\n    }\n    \n    try{\n                         \n        stream = fs.createReadStream(user_csv_path)\n          .pipe(csv())\n          .on('data', (row) => {\n              const headers = Object.keys(row);\n              if (row['Dataset']==input_dataset){\n                  len = row[headers[1]].split(\"_\").length\n                  st_model_name.push(row[headers[1]].split(\"-\")[0] + \"_\" + row[headers[1]].split(\"_\")[len-1]);\n                  st_avg_acc.push(Number(row[headers[2]]*100));\n                  st_avg_dt.push(Number(row[headers[5]]));\n              }\n              obj_output = {\n                  'st_model_name': st_model_name,\n                  'st_avg_acc': st_avg_acc,\n                  'st_avg_dt': st_avg_dt,\n              };\n              Object.assign(result, obj_output);\n           })\n          .on('end', () => {\n              console.log('CSV file successfully processed');\n              msg.payload = result;\n              node.send(msg);\n              flow.set('st_model_log', result);\n           });\n    }\n    catch(err){\n        node.log(\"Error 2\")\n        node.log(err);\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 4260,
        "wires": [
            [
                "6965c7c7dd84bc0f",
                "37417b1c54b7d2a2",
                "6db07af328a6c164",
                "0f28d719db1f1d8c"
            ]
        ]
    },
    {
        "id": "6965c7c7dd84bc0f",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var user_in = flow.get('user_model_log') || 0;\nif (user_in==0){\n    var user_acc = null;\n}\nelse{\n    user_acc = user_in['user_avg_acc'];\n    if (user_acc==undefined){user_acc = null;}\n}\nif (user_acc==null){\n    msg.payload = null;\n    return msg;\n}\nelse{\n    var st_in = flow.get('st_model_log');\n    var st_acc = st_in['st_avg_acc'];\n    var m={\n        \"series\":[\"server accuracy\", \"model accuracy\"],\n        \"data\":[user_acc,st_acc],\n        \"labels\":user_in['user_model_name'] \n    };\n    msg.payload = [m];\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 4340,
        "wires": [
            [
                "a080d6c9db795bab"
            ]
        ]
    },
    {
        "id": "3ca85c635881ec92",
        "type": "ui_chart",
        "z": "83ce028f10c839ea",
        "name": "",
        "group": "19aa4f19b70241ed",
        "order": 29,
        "width": 28,
        "height": 9,
        "label": "Average Detection Time Per Object (s)",
        "chartType": "horizontalBar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Loading",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#53c705",
            "#b7f26e",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 690,
        "y": 4400,
        "wires": [
            []
        ]
    },
    {
        "id": "37417b1c54b7d2a2",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var user_in = flow.get('user_model_log') || 0;\nif (user_in==0){\n    var user_dt = null;\n}\nelse{\n    user_dt = user_in['user_avg_dt'];\n    if (user_dt==undefined){user_dt = null;}\n}\nif (user_dt==null){\n    msg.payload = null;\n    return msg;\n}\nelse{\n    var st_in = flow.get('st_model_log');\n    var st_dt = st_in['st_avg_dt'];\n    var m={\n        \"series\":[\"server detection time\", \"model detection time\"],\n        \"data\":[user_dt,st_dt],\n        \"labels\":user_in['user_model_name'] \n    };\n    msg.payload = [m];\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 4400,
        "wires": [
            [
                "3ca85c635881ec92"
            ]
        ]
    },
    {
        "id": "6db07af328a6c164",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var user_in = flow.get('user_model_log') || 0;\nif (user_in==0){\n    var user_rt = null;\n}\nelse{\n    user_rt= user_in['user_avg_rt'];\n    if (user_rt==undefined){user_rt = null;}\n}\nif (user_rt==null){\n    msg.payload = null;\n    return msg;\n}\nelse{\n    var m={\n        \"series\":[\"server response time\"],\n        \"data\":[user_rt],\n        \"labels\":user_in['user_model_name'] \n    };\n    msg.payload = [m];\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 4460,
        "wires": [
            [
                "86d6cc3e84ce6601"
            ]
        ]
    },
    {
        "id": "86d6cc3e84ce6601",
        "type": "ui_chart",
        "z": "83ce028f10c839ea",
        "name": "",
        "group": "19aa4f19b70241ed",
        "order": 49,
        "width": 28,
        "height": 9,
        "label": "TensorFlow Server Response Time (s)",
        "chartType": "horizontalBar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Loading",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#f05ff2",
            "#ec91ee",
            "#f5b832",
            "#f2739f",
            "#f2ff38",
            "#e461f5",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 690,
        "y": 4460,
        "wires": [
            []
        ]
    },
    {
        "id": "0f28d719db1f1d8c",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var user_in = flow.get('user_model_log') || 0;\nif (user_in==0){\n    var user_usg = null;\n}\nelse{\n    user_usg= user_in['user_avg_usg'];\n    if (user_usg==undefined){user_rt = null;}\n}\nif (user_usg==null){\n    msg.payload = null;\n    return msg;\n}\nelse{\n    var m={\n        \"series\":[\"user average usage\"],\n        \"data\":[user_usg],\n        \"labels\":user_in['user_model_name'] \n    };\n    msg.payload = [m];\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 4520,
        "wires": [
            [
                "5e8f7443411ad0d2"
            ]
        ]
    },
    {
        "id": "5e8f7443411ad0d2",
        "type": "ui_chart",
        "z": "83ce028f10c839ea",
        "name": "",
        "group": "19aa4f19b70241ed",
        "order": 69,
        "width": 28,
        "height": 10,
        "label": "Number of Usage ",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Loading",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#5b58f3",
            "#ec91ee",
            "#f5b832",
            "#f2739f",
            "#f2ff38",
            "#e461f5",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 630,
        "y": 4520,
        "wires": [
            []
        ]
    },
    {
        "id": "1f98a51992b6cfb0",
        "type": "inject",
        "z": "83ce028f10c839ea",
        "name": "2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "40",
        "topic": "",
        "payloadType": "date",
        "x": 90,
        "y": 4660,
        "wires": [
            [
                "ba918ca07b4c442b"
            ]
        ]
    },
    {
        "id": "ba918ca07b4c442b",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('server_dir') || \"\";\nflow.get('bat_dir_list') || 0;\nflow.set('server_dir', \"D:/my_dir/user_server\");\nvar server_dir = flow.get('server_dir');\nvar model_list = flow.get('ui_model_list');\nvar path_list = [];\n\nfor (let i=0; i<model_list.length; i++){\n    model_path = server_dir + \"/\" + model_list[i].split('_')[1] + \"/\" + model_list[i];\n    dict = {name:model_list[i],start:model_list[i].split('_')[1] + \"_start_\" + String(i+1),\n            stop:model_list[i].split('_')[1] + \"_stop_\" + String(i+1),dir:model_path};\n    path_list.push(dict);\n} \n\n\nflow.set('bat_dir_list', path_list);\n\nmsg.payload = flow.get('bat_dir_list');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 4660,
        "wires": [
            [
                "61bb13c90fe0e7d8",
                "76617a570feebb96",
                "097110157244586b",
                "64faacbb21ce27b1",
                "0e4d949eb47ec59e"
            ]
        ]
    },
    {
        "id": "ee6ecbe34f4ee036",
        "type": "ui_template",
        "z": "83ce028f10c839ea",
        "group": "7de23636.088a88",
        "name": "server",
        "order": 1,
        "width": 11,
        "height": "40",
        "format": "<div ng-bind-html=\"msg.template\"></div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 710,
        "y": 4560,
        "wires": [
            []
        ]
    },
    {
        "id": "65d35321b697ef36",
        "type": "ui_template",
        "z": "83ce028f10c839ea",
        "group": "7de23636.088a88",
        "name": "led",
        "order": 4,
        "width": 3,
        "height": "40",
        "format": "<svg width=\"30\" height=\"30\" style=\"border:1px solid black\">\n  <circle cx=\"15\" cy=\"15\" r=\"15\" stroke=\"yellow\" stroke-width=\"1\" fill=\"{{msg.payload==true ? 'green':'red'}}\" />\n</svg>\n<svg width=\"30\" height=\"30\" style=\"border:1px solid black\">\n  <circle cx=\"15\" cy=\"15\" r=\"15\" stroke=\"yellow\" stroke-width=\"1\" fill=\"{{msg.payload==true ? 'green':'red'}}\" />\n</svg>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1070,
        "y": 4660,
        "wires": [
            []
        ]
    },
    {
        "id": "59397fc8f949c9dd",
        "type": "ui_template",
        "z": "83ce028f10c839ea",
        "group": "7de23636.088a88",
        "name": "START button",
        "order": 2,
        "width": 3,
        "height": "40",
        "format": "<div ng-bind-html=\"msg.template\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 800,
        "y": 4600,
        "wires": [
            [
                "fece30b29ba578bb",
                "568aa0dd84fa50cf"
            ]
        ]
    },
    {
        "id": "d70bcbae6bdfbcb8",
        "type": "ui_template",
        "z": "83ce028f10c839ea",
        "group": "7de23636.088a88",
        "name": "STOP button",
        "order": 3,
        "width": 3,
        "height": "40",
        "format": "<div ng-bind-html=\"msg.template\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 790,
        "y": 4720,
        "wires": [
            [
                "fece30b29ba578bb",
                "568aa0dd84fa50cf"
            ]
        ]
    },
    {
        "id": "61bb13c90fe0e7d8",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get(\"button_start\") || 0;\nvar input = msg.payload;\nvar str = \"<style>\\n\";\nstr += \".buttonDiv {\\n\"\nstr += \"    margin: 10px;\\n\";\nstr += \"    padding:15px 10px 6px;\\n\";\nstr += \"    height:30px;\\n\";\nstr += \"}\\n\\n\";\nstr += \".startbutton {\\n\";\nstr += \"  margin: -5px;\\n\";\nstr += \"  padding: 5px 20px 5px;\\n\";\nstr += \"  font-size: 20px;\\n\";\nstr += \"  text-align: center;\\n\";\nstr += \"  cursor: pointer;\\n\";\nstr += \"  outline: none;\\n\";\nstr += \"  color: #fff;\\n\";\nstr += \"  background-color: #1FA808;\\n\";\nstr += \"  border: none;\\n\";\nstr += \"  border-radius: 15px;\\n\";\nstr += \"  box-shadow: 0 3px #0A6921;\\n\";\nstr += \"}\\n\\n\";\nstr += \".startbutton:hover {background-color: #82C953}\\n\\n\";\nstr += \".startbutton:active {\\n\";\nstr += \"  background-color: #429B46;\\n\";\nstr += \"  box-shadow: 0 5px #0A6921;\\n\";\nstr += \"  transform: translateY(4px);\\n\";\nstr += \"}\\n\\n\";\nstr += \"</style>\\n\";\n\nfor (let i=0; i<input.length; i++){\n    str += \"<div class='buttonDiv'>\\n\";\n    str += \"        <button ng-class='\" + input[i].start +\n    \"' class='startbutton' ng-click='send ({payload:\\\"\" + input[i].start \n    + \"\\\"})'>START</button>\\n\";\n    str += \"        <br>\\n\";\n    str += \"</div>\\n\"\n}\nflow.set(\"button_start\", str);\nmsg.payload = flow.get(\"button_start\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 4600,
        "wires": [
            [
                "6a6126330c4aae6b"
            ]
        ]
    },
    {
        "id": "6a6126330c4aae6b",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "msg.template = flow.get('button_start');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 4600,
        "wires": [
            [
                "59397fc8f949c9dd"
            ]
        ]
    },
    {
        "id": "097110157244586b",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('led_html') || 0;\nvar input = msg.payload;\nvar str = \"<style>\\n\";\nstr += \".container {\\n\";\nstr += \"  margin: 10px;\\n\";\nstr += \"  padding:15px 10px 6px;\\n\";\nstr += \"  height: 30px;\\n\";\nstr += \"  width: 30px;\\n\";\nstr += \"}\\n\";\nstr += \".led-green {\\n\";\nstr += \"  margin: auto;\\n\";\nstr += \"  width: 30px;\\n\";\nstr += \"  height:30px;\\n\";\nstr += \"  background-color: #ABFF00;\\n\";\nstr += \"  border-radius: 100%;\\n\";\nstr += \"  box-shadow: rgba(0, 0, 0, 0.2) 0 -1px 7px 1px, inset #304701 0 -1px 9px, #89FF00 0 2px 12px;\\n\";\nstr += \"}\\n\";\nstr += \".led-red {\\n\";\nstr += \"  margin: 0 auto;\\n\";\nstr += \"  width: 30px;\\n\";\nstr += \"  height: 30px;\\n\";\nstr += \"  background-color: #F00;\\n\";\nstr += \"  border-radius: 50%;\\n\";\nstr += \"  box-shadow: rgba(0, 0, 0, 0.2) 0 -1px 7px 1px, inset #441313 0 -1px 9px, rgba(255, 0, 0, 0.5) 0 2px 12px;\\n\";\nstr += \"}\\n\";\nstr += \"</style>\\n\\n\";\n\nfor(let i=0; i<input.length; i++){\n    str += '<div class=\"container\">\\n';\n    str += '    <div class=\"'+ input[i].name + ' led-red\"></div>\\n';\n    str += '</div>\\n';\n}\nflow.set('led_html', str);\nmsg.payload = flow.get('led_html');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 4680,
        "wires": [
            [
                "fece30b29ba578bb"
            ]
        ]
    },
    {
        "id": "76617a570feebb96",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get(\"button_stop\") || 0;\nvar input = msg.payload;\nvar str = \"<style>\\n\";\nstr += \".stopDiv {\\n\"\nstr += \"    margin: 10px;\\n\";\nstr += \"    padding:15px 10px 6px;\\n\";\nstr += \"    height:30px;\\n\";\nstr += \"}\\n\\n\";\nstr += \".stopbutton {\\n\";\nstr += \"  margin: -5px;\\n\";\nstr += \"  padding: 5px 20px 5px;\\n\";\nstr += \"  font-size: 20px;\\n\";\nstr += \"  text-align: center;\\n\";\nstr += \"  cursor: pointer;\\n\";\nstr += \"  outline: none;\\n\";\nstr += \"  color: #fff;\\n\";\nstr += \"  background-color: #ED3407;\\n\";\nstr += \"  border: none;\\n\";\nstr += \"  border-radius: 15px;\\n\";\nstr += \"  box-shadow: 0 3px #8D042E;\\n\";\nstr += \"}\\n\\n\";\nstr += \".stopbutton:hover {background-color: #DE6A63}\\n\\n\";\nstr += \".stopbutton:active {\\n\";\nstr += \"  background-color: #D90000;\\n\";\nstr += \"  box-shadow: 0 5px #8D042E;\\n\";\nstr += \"  transform: translateY(4px);\\n\";\nstr += \"}\\n\\n\";\nstr += \"</style>\\n\";\n\nfor (let i=0; i<input.length; i++){\n    str += \"<div class='stopDiv'>\\n\";\n    str += \"        <div><button ng-class='\" + input[i].stop +\n    \"' class='stopbutton' ng-click='send ({payload:\\\"\" + input[i].stop + \"\\\"})'>STOP</button></div>\\n\";\n    str += \"        <br>\\n\";\n    str += \"</div>\\n\"\n}\nflow.set(\"button_stop\", str);\nmsg.payload = flow.get(\"button_stop\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 4720,
        "wires": [
            [
                "bd6f8aa3ea0384e1"
            ]
        ]
    },
    {
        "id": "bd6f8aa3ea0384e1",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "msg.template = flow.get('button_stop');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 4720,
        "wires": [
            [
                "d70bcbae6bdfbcb8"
            ]
        ]
    },
    {
        "id": "30ba1e03f87eaa84",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "msg.template = flow.get('led_html');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 4660,
        "wires": [
            [
                "65d35321b697ef36"
            ]
        ]
    },
    {
        "id": "fece30b29ba578bb",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var input_1 = flow.get('bat_dir_list');\nvar input_2 = msg.payload;//msg.payload;\nvar input_3 = flow.get('led_html');\nvar str = \"\";\n\nfor (let i=0; i<input_1.length; i++){\n    const regexpModifications = new RegExp(input_1[i].name + \".*\", \"g\");\n    const regexExpression = new RegExp(input_1[i].name, \"g\");\n    const green_line = input_1[i].name + ' led-green\"></div>\\n';\n    const red_line = input_1[i].name + ' led-red\"></div>\\n'\n    if ((input_3.match(regexExpression))!=null){\n        if (input_2==input_1[i].start){\n            str = input_3.replace(regexpModifications, green_line);\n            break; \n        }\n        else if (input_2==input_1[i].stop){\n            str = input_3.replace(regexpModifications, red_line);\n            break; \n        }\n        else{\n            str = input_3;\n        }\n    }\n}\n\nflow.set('led_html', str);\nmsg.payload = flow.get('led_html');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 4660,
        "wires": [
            [
                "30ba1e03f87eaa84"
            ]
        ]
    },
    {
        "id": "64faacbb21ce27b1",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 130,
        "y": 4600,
        "wires": []
    },
    {
        "id": "568aa0dd84fa50cf",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get('led_status') || 0;\nflow.set('led_status', msg.payload);\nvar input_1 = flow.get('bat_dir_list') || 0;\nvar input_2 = msg.payload;\nvar server = ['create_server.bat', \"start_server.bat\", 'kill_server.bat'];\nvar cmd_code = \"\";\nfor (let i=0; i<input_1.length; i++){\n    if (input_2==input_1[i].start){\n        cmd_code = input_1[i].dir + \"/\" + server[0];\n        msg.payload = cmd_code\n        msg.server_status = 'start';\n        break;\n    }\n    else if (input_2==input_1[i].stop){\n        cmd_code = input_1[i].dir + \"/\" + server[2];\n        msg.payload = cmd_code;\n        msg.server_status = 'stop';\n        break;\n    }\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 4880,
        "wires": [
            [
                "b6fdddcaf271d9f3"
            ]
        ]
    },
    {
        "id": "b6fdddcaf271d9f3",
        "type": "switch",
        "z": "83ce028f10c839ea",
        "name": "",
        "property": "server_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 4880,
        "wires": [
            [
                "dd1fd8bfcd6bdfee"
            ],
            [
                "3c2c13c5d0e97dc8"
            ]
        ]
    },
    {
        "id": "dd1fd8bfcd6bdfee",
        "type": "change",
        "z": "83ce028f10c839ea",
        "name": "start server",
        "rules": [
            {
                "t": "set",
                "p": "server_status",
                "pt": "msg",
                "to": "payload",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 4820,
        "wires": [
            [
                "047c16b4ed5798d1"
            ]
        ]
    },
    {
        "id": "3c2c13c5d0e97dc8",
        "type": "change",
        "z": "83ce028f10c839ea",
        "name": "stop server",
        "rules": [
            {
                "t": "set",
                "p": "server_status",
                "pt": "msg",
                "to": "payload",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 4920,
        "wires": [
            [
                "f090c8671d8c0ab4"
            ]
        ]
    },
    {
        "id": "90c899396a083450",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 4920,
        "wires": []
    },
    {
        "id": "96c8b024dfffd132",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "var input_1 = flow.get('bat_dir_list');\nvar input_2 = flow.get('led_status');\nvar server = ['create_server.bat', \"start_server.bat\", 'kill_server.bat'];\nvar cmd_code = \"\";\nfor (let i=0; i<input_1.length; i++){\n    if (input_2==input_1[i].start){\n        cmd_code = input_1[i].dir + \"/\" + server[1];\n        msg.payload = cmd_code\n        msg.server_status = 'start';\n        break;\n    }\n}\nflow.set('led_status', 0);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 4820,
        "wires": [
            [
                "8c4934a637928cec"
            ]
        ]
    },
    {
        "id": "047c16b4ed5798d1",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 610,
        "y": 4820,
        "wires": [
            [
                "96c8b024dfffd132",
                "90c899396a083450"
            ],
            [
                "90c899396a083450"
            ],
            [
                "90c899396a083450"
            ]
        ]
    },
    {
        "id": "8c4934a637928cec",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 870,
        "y": 4820,
        "wires": [
            [
                "90c899396a083450"
            ],
            [
                "90c899396a083450"
            ],
            [
                "90c899396a083450"
            ]
        ]
    },
    {
        "id": "f090c8671d8c0ab4",
        "type": "exec",
        "z": "83ce028f10c839ea",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 610,
        "y": 4920,
        "wires": [
            [
                "90c899396a083450"
            ],
            [
                "90c899396a083450"
            ],
            [
                "90c899396a083450"
            ]
        ]
    },
    {
        "id": "da15e86cbb677c77",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "bla",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1220,
        "wires": []
    },
    {
        "id": "fb6ec63b838b61ab",
        "type": "debug",
        "z": "83ce028f10c839ea",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 4040,
        "wires": []
    },
    {
        "id": "4c5c306f.e02298",
        "type": "ui_table",
        "z": "c4f39e9c.3642f8",
        "group": "b070d416.db371",
        "name": "my table",
        "order": 8,
        "width": 26,
        "height": 3,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 880,
        "y": 200,
        "wires": [
            [
                "e14c9bb4d2074ea7"
            ]
        ]
    },
    {
        "id": "444afa88218cb34b",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "var input = msg.payload;\nvar fs = global.get('fs');\ntry{\nif (fs.existsSync(input)){\n    msg.payload = \"CSV file exists.\";\n    msg.filename = input;\n    node.send(msg);\n    }\nelse {\n    msg.payload = \"CSV file does not exists.\";\n    node.send(msg);   \n}\n}\ncatch(err){\n    node.log(\"Error 1:\\n\\r\")\n    node.error(err)\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 200,
        "wires": [
            [
                "63427ea3f3813bb3"
            ]
        ]
    },
    {
        "id": "8fd86dd5ddbfc809",
        "type": "file in",
        "z": "c4f39e9c.3642f8",
        "name": "Read File",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 200,
        "wires": [
            [
                "5ba899054660a92d"
            ]
        ]
    },
    {
        "id": "5ba899054660a92d",
        "type": "csv",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 590,
        "y": 200,
        "wires": [
            [
                "8681ba7db5abe4ed"
            ]
        ]
    },
    {
        "id": "8681ba7db5abe4ed",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "ui_control",
        "func": "var input = msg;\nmsg.payload = input.payload;\n\nmsg.ui_control =  {\n    \"tabulator\":{\n        \n        \"validationMode\":\"highlight\",\n        \"columnResized\":\"function(column){var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\n        \"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.field});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\n        \"groupHeader\":\"function (value, count, data, group) {return value + \\\"<span style='color:#d00; margin-left:10px;'>(\\\" + count + \\\" Termostat\\\"+((count>1) ? \\\"e\\\" : \\\"\\\") + \\\")</span>\\\";}\",\n        \"headerHozAlign\":\"center\",\n        \"columns\":[\n            {\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Date\",\"field\":\"Date\",\"width\":100,\"align\":\"center\"},\n            {\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Time\",\"field\":\"Time\",\"width\":100,\"align\":\"center\"},\n            {\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Image Name\",\"field\":\"Image Name\",\"width\":150,\"align\":\"center\"},\n            {\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Class\",\"field\":\"Class\",\"width\":100,\"align\":\"center\"},\n            {\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Predicted Count\",\"field\":\"Count\",\"width\":180,\"align\":\"center\"},\n            {\"formatterParams\":{\"target\":\"_blank\",\"min\":0.01,\"max\":2,\"color\":[\"#f8826b\",\"#f4b252\",\"orange\"],\"legend\":\"function (value) {return value+'s';}\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Time Per Detection (s)\",\"field\":\"Time Per Detection (s)\",\"width\":200,\"formatter\":\"progress\"},\n            {\"formatterParams\":{\"target\":\"_blank\",\"min\":0.100,\"max\":70.000,\"color\":[\"#f8826b\",\"#f4b252\",\"orange\"],\"legend\":\"function (value) {var rounded = parseFloat(value).toFixed(3); return String(rounded)+'s';}\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Response Time (s)\",\"field\":\"Response Time (s)\",\"width\":160,\"formatter\":\"progress\"},\n            {\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"User Remark\",\"field\":\"User Remark\",\"width\":148,\"align\":\"center\", \"formatter\":\"function (cell, formatterParams, onRendered) {if(cell.getValue()=='yes') return \\\"<span style='color:green;'>&#10004;</span>\\\"; else if(cell.getValue()=='no') return \\\"<span>&#10060;</span>\\\"}\"},\n            {\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"User Count\",\"field\":\"User_Count\",\"width\":120, \"align\":\"center\", \"editor\":\"input\", \"validator\":[\"required\", \"integer\"]},\n            {\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Accuracy\",\"field\":\"Accuracy\",\"width\":120, \"align\":\"center\"}],\n        //\"cellEdited\":\"function(cell){this.send({ui_control:{callback:'cellEdited'},payload:cell.getValue(),oldValue:cell.getOldValue(),field:cell.getColumn().getField(),id:cell.getRow().getCell('id').getValue()}); }\",\n        \"cellEdited\":\"function(cell){var change = {newValue:cell.getRow().getData()};this.send({topic:this.config.topic,ui_control:{callback:'cellEdited',changes:change}});}\",\n        \"cellClick\":\"function(e, cell){ var click = {newClick:cell.getRow().getData()}; this.send({topic:this.config.topic,ui_control:{callback:'cellClick',clicked:click}});}\",\n        \"layout\":\"fitColumns\",\n        \"movableColumns\":true,\n        \"groupBy\":\"\"\n    },\n    \"customHeight\":12\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 200,
        "wires": [
            [
                "4c5c306f.e02298"
            ]
        ]
    },
    {
        "id": "e14c9bb4d2074ea7",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "flow.get('edited_row')||0;\nflow.get('clicked_row')||0;\nvar input = msg;\nif (Object.keys(input).length==3){\n    if (input.ui_control.callback == \"cellEdited\"){\n        cell_edited = 1;\n        flow.set('edited_row',input);\n    }\n    else if (input.ui_control.callback == \"cellClick\") {\n        cell_edited = 2;\n        flow.set('clicked_row',input);\n    }\n}\n\nmsg.output = cell_edited;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 200,
        "wires": [
            [
                "0abee69fb4ef866f"
            ]
        ]
    },
    {
        "id": "c995909986ee7bdf",
        "type": "inject",
        "z": "c4f39e9c.3642f8",
        "name": "Manual Start Here",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "79ca826d5404622f"
            ]
        ]
    },
    {
        "id": "79ca826d5404622f",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "flow.get('Node-RED-script-dir') || 0;\nflow.get('chatId') || 0;\nvar chatId_list = [1902329739];\nflow.set('chatId', chatId_list);\nflow.set('Node-RED-script-dir', 'D:/Program_Files/VisualStudio2019/convert_base64_to_jpg/Node_RED_Project/');\n\nvar dir = flow.get('Node-RED-script-dir') + 'script_1.py';\n\nmsg.payload = dir\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 60,
        "wires": [
            [
                "18c38f625d40b78b"
            ]
        ]
    },
    {
        "id": "18c38f625d40b78b",
        "type": "exec",
        "z": "c4f39e9c.3642f8",
        "command": "python",
        "addpay": "payload",
        "append": "-u D:/my_dir/streamlit_user_directory",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "script 1",
        "x": 460,
        "y": 60,
        "wires": [
            [
                "5c9e57b0810f7b78"
            ],
            [],
            []
        ]
    },
    {
        "id": "5c9e57b0810f7b78",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "flow.get('ui_dataset_list') || 0;\nflow.get('sc1') || 0;\nflow.set('sc1', JSON.parse(msg.payload))\n\nvar input_1 = flow.get('sc1');\nvar list = [];\nfor (let i=0; i<input_1.length; i++)\n{\n    var key = String(Object.keys(input_1[i])[0]);\n    list.push(key);\n}\nflow.set('ui_dataset_list', list)\n\nmsg.options = flow.get('ui_dataset_list');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 60,
        "wires": [
            [
                "1dba43e2f1862911"
            ]
        ]
    },
    {
        "id": "1dba43e2f1862911",
        "type": "ui_dropdown",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "label": "Choose dataset: ",
        "tooltip": "",
        "place": "select options",
        "group": "b070d416.db371",
        "order": 1,
        "width": 9,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 780,
        "y": 60,
        "wires": [
            [
                "95b2fda4a1ed81bf"
            ]
        ]
    },
    {
        "id": "95b2fda4a1ed81bf",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "flow.get('ui_model_list') || 0;\nflow.get('eval_log_path_list')||0;\nflow.set('ui_dataset_name', msg.payload);\nvar dataset_name = \"\";\nvar fs = global.get('fs');\n\nvar input_1 = flow.get('sc1');\nvar input_2 = msg.payload; // dataset name\nvar input_3 = flow.get('ui_dataset_list');\nvar model_list = [];\nvar evalCSV_path_list = [];\n\nfor (let i=0; i<input_3.length; i++)\n{\n    dataset_name = String(Object.keys(input_1[i])[0]);\n    \n    if (dataset_name==input_2){\n        \n        model_array = input_1[i][dataset_name];\n        for (let k=0; k<model_array.length; k++)\n        {\n            model_name = Object.keys(model_array[k])[0];\n            node_red_path = model_array[k][model_name]['node_red_directory'] + \"csv_prediction_log/eval_log_file.csv\";\n            try{\n                if (fs.existsSync(node_red_path)){\n                    model_list.push(model_name);\n                    evalCSV_path_list.push(node_red_path);\n                    msg.output = \"CSV file exixsts.\";\n                    node.send(msg);\n                }\n                else {\n \n                }\n            }\n            catch(err){\n                node.log(\"Error 1:\\n\\r\")\n                node.error(err)\n            }\n        }\n    }\n}\nflow.set('ui_model_list', model_list);\nflow.set('eval_log_path_list', evalCSV_path_list);\nmsg.payload = flow.get('ui_dataset_name')\nmsg.options = flow.get('ui_model_list');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 60,
        "wires": [
            [
                "30a03a452398f509",
                "d7ae39994e95c147"
            ]
        ]
    },
    {
        "id": "9368b2ccb7912f4a",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "msg.payload = flow.get('ui_dataset_name');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 40,
        "wires": [
            [
                "30a03a452398f509"
            ]
        ]
    },
    {
        "id": "30a03a452398f509",
        "type": "ui_text",
        "z": "c4f39e9c.3642f8",
        "group": "b070d416.db371",
        "order": 3,
        "width": 11,
        "height": 1,
        "name": "",
        "label": "Dataset: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 1320,
        "y": 60,
        "wires": []
    },
    {
        "id": "0abee69fb4ef866f",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "var input = msg.output;\nvar output = null;\nif (input==1){\n    output = true;\n}\nelse if (input==2) {\n    output = false;\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 200,
        "wires": [
            [
                "c37fe7bec3bb17e2"
            ]
        ]
    },
    {
        "id": "c37fe7bec3bb17e2",
        "type": "switch",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1310,
        "y": 200,
        "wires": [
            [
                "5dcb7e7ceab2311e"
            ],
            [
                "ab044034e759e012"
            ]
        ]
    },
    {
        "id": "0c8a0c19d800d11c",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "var cell_edited = flow.get(\"edited_row\");\nvar cell_clicked = flow.get(\"clicked_row\");\nvar eval_log_fpath = flow.get('chosen_eval_csv');\nmsg.payload = eval_log_fpath;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 100,
        "y": 200,
        "wires": [
            [
                "444afa88218cb34b"
            ]
        ]
    },
    {
        "id": "79040fd1decc2591",
        "type": "ui_dropdown",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "label": "Choose Model:",
        "tooltip": "",
        "place": "Select option",
        "group": "b070d416.db371",
        "order": 4,
        "width": 9,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 780,
        "y": 120,
        "wires": [
            [
                "657667119aa7b0d1"
            ]
        ]
    },
    {
        "id": "d7ae39994e95c147",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "\nvar model_list = msg.options;\nmsg.options = model_list;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 120,
        "wires": [
            [
                "79040fd1decc2591"
            ]
        ]
    },
    {
        "id": "657667119aa7b0d1",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "flow.get('ui_model_name')||0;\nflow.get('chosen_eval_csv')||0;\nvar input = msg.payload;\nvar eval_csv_list = flow.get('eval_log_path_list');\nvar chosen_path = null;\nvar model_name = \"\";\n\nfor (let i=0; i<eval_csv_list.length; i++){\n    path = eval_csv_list[i];\n    splitted_name = path.split(\"/\");\n    model_name = splitted_name[5];\n    if (model_name==input){\n        chosen_path = path;\n    }\n}\nflow.set('chosen_eval_csv', chosen_path);\nflow.set('ui_model_name', input);\nmsg.payload = input;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 120,
        "wires": [
            [
                "8bf562f8de054893",
                "0c8a0c19d800d11c"
            ]
        ]
    },
    {
        "id": "ea14534fb67afd34",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "msg.payload = flow.get('ui_model_name');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 100,
        "wires": [
            [
                "8bf562f8de054893"
            ]
        ]
    },
    {
        "id": "8bf562f8de054893",
        "type": "ui_text",
        "z": "c4f39e9c.3642f8",
        "group": "b070d416.db371",
        "order": 6,
        "width": 11,
        "height": 1,
        "name": "",
        "label": "Model:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 1330,
        "y": 120,
        "wires": []
    },
    {
        "id": "63427ea3f3813bb3",
        "type": "switch",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CSV file exists.",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CSV file does not exists.",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 120,
        "wires": [
            [
                "fb77ed3b08d590ad"
            ],
            [
                "5bf188cd608342e2"
            ]
        ]
    },
    {
        "id": "fb77ed3b08d590ad",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "var eval_log_fpath = flow.get('chosen_eval_csv');\nmsg.filename = eval_log_fpath;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "8fd86dd5ddbfc809"
            ]
        ]
    },
    {
        "id": "5dcb7e7ceab2311e",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "var input_1 = flow.get('edited_row');\nvar eval_log_fpath = flow.get('chosen_eval_csv');\n\nvar user_count = parseInt(input_1.ui_control.changes.newValue.User_Count);\nvar row_number = parseInt(input_1.ui_control.changes.newValue.id);\n\nvar str = flow.get('Node-RED-script-dir') + 'script_8.py' + \" -e \" +  eval_log_fpath + \" -r \" + String(row_number) + \" -c \" + String(user_count);\nmsg.payload = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 200,
        "wires": [
            [
                "d24f1cd988bd54d1"
            ]
        ]
    },
    {
        "id": "d24f1cd988bd54d1",
        "type": "exec",
        "z": "c4f39e9c.3642f8",
        "command": "python",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "script 8",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "56d56cae5703b513"
            ],
            [],
            []
        ]
    },
    {
        "id": "56d56cae5703b513",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "flow.get('Node-RED-script-dir') || 0;\nflow.set('Node-RED-script-dir', 'D:/Program_Files/VisualStudio2019/convert_base64_to_jpg/Node_RED_Project/');\n\nvar dir = flow.get('Node-RED-script-dir') + 'script_7.py';\n\nmsg.payload = dir\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 280,
        "wires": [
            [
                "deea2b64c3473581"
            ]
        ]
    },
    {
        "id": "deea2b64c3473581",
        "type": "exec",
        "z": "c4f39e9c.3642f8",
        "command": "python",
        "addpay": "payload",
        "append": "-s D:/my_dir/streamlit_user_directory",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "script 7",
        "x": 400,
        "y": 280,
        "wires": [
            [
                "79ca826d5404622f"
            ],
            [],
            []
        ]
    },
    {
        "id": "52128c3dd79825f3",
        "type": "ui_button",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "group": "b070d416.db371",
        "order": 14,
        "width": 14,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "79ca826d5404622f"
            ]
        ]
    },
    {
        "id": "3863dbb231c6f1d4",
        "type": "ui_button",
        "z": "83ce028f10c839ea",
        "name": "",
        "group": "19aa4f19b70241ed",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 4060,
        "wires": [
            [
                "aa5d482aba7bb1c4",
                "b8fb8f56dc0c4eb7",
                "a35b898ff74387f9"
            ]
        ]
    },
    {
        "id": "ab044034e759e012",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "flow.get(\"img_path_list\") || 0;\nflow.get(\"image_name\") ||0;\n\nvar input_1 = flow.get('clicked_row');\nvar eval_log_fpath = flow.get('chosen_eval_csv');\nvar split_list = eval_log_fpath.split(\"/\");\nsplit_list.pop();\nsplit_list.pop();\n\nvar img_path = \"\";\nfor (let i=0; i<split_list.length; i++){\n\n    img_path += split_list[i] + \"/\";\n}\nvar img_name = input_1.ui_control.clicked.newClick['Image Name'];\n\nvar bbox_img_path = img_path + \"bbox_img/\" + img_name + \"_bb.jpg\";\nvar telegram_img_path = img_path + \"telegram_img/\" + img_name + \".jpg\";\n\nvar img_path_list = [bbox_img_path, telegram_img_path];\nflow.set(\"img_path_list\", img_path_list);\nflow.set(\"image_name\", img_name);\nvar img_list = flow.get(\"img_path_list\");\n\nvar msg1 = {filename:flow.get(\"img_path_list\")[0]};\nvar msg2 = {filename:flow.get(\"img_path_list\")[1]};\nreturn [[msg1],[msg2]];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 260,
        "wires": [
            [
                "a62f817da5658623",
                "6b1dfcc1bc4197ac"
            ],
            [
                "9918652ec74455b7"
            ]
        ]
    },
    {
        "id": "4cd8df9bc16855f0",
        "type": "base64",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 900,
        "y": 260,
        "wires": [
            [
                "d05f1ac033634fa7"
            ]
        ]
    },
    {
        "id": "6174458834a5d241",
        "type": "jimp-image",
        "z": "c4f39e9c.3642f8",
        "name": "bbox_img",
        "data": "image",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 1100,
        "y": 260,
        "wires": [
            [
                "e7301403960aa76c"
            ]
        ]
    },
    {
        "id": "e7301403960aa76c",
        "type": "image viewer",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "active": true,
        "x": 1270,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a62f817da5658623",
        "type": "file in",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "filename": "",
        "format": "stream",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 770,
        "y": 260,
        "wires": [
            [
                "4cd8df9bc16855f0"
            ]
        ]
    },
    {
        "id": "9918652ec74455b7",
        "type": "file in",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "filename": "",
        "format": "stream",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 230,
        "y": 400,
        "wires": [
            [
                "d38394eff146178f"
            ]
        ]
    },
    {
        "id": "d38394eff146178f",
        "type": "base64",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 400,
        "y": 400,
        "wires": [
            [
                "d14c5f532dd772d2"
            ]
        ]
    },
    {
        "id": "10e4fc6df7bc9d63",
        "type": "jimp-image",
        "z": "c4f39e9c.3642f8",
        "name": "telegram_img",
        "data": "image",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 600,
        "y": 400,
        "wires": [
            [
                "b0089ff5aa3aadc5"
            ]
        ]
    },
    {
        "id": "b0089ff5aa3aadc5",
        "type": "image viewer",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "active": true,
        "x": 850,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "e95de6e1ec41b95e",
        "type": "template",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<img width=\"500px\" height=\"667px\" src=\"{{{payload}}}\">",
        "output": "str",
        "x": 440,
        "y": 460,
        "wires": [
            [
                "02ca8ba11e46a1da"
            ]
        ]
    },
    {
        "id": "02ca8ba11e46a1da",
        "type": "ui_template",
        "z": "c4f39e9c.3642f8",
        "group": "b070d416.db371",
        "name": "telergram img",
        "order": 11,
        "width": 13,
        "height": 13,
        "format": "<style>\n.display_img {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n</style>\n\n<div class=\"display_img\" ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 620,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "0789e9478e1fdb58",
        "type": "jimp-image",
        "z": "c4f39e9c.3642f8",
        "name": "telegram img",
        "data": "image",
        "dataType": "msg",
        "ret": "b64",
        "parameter1": "",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 270,
        "y": 460,
        "wires": [
            [
                "e95de6e1ec41b95e"
            ]
        ]
    },
    {
        "id": "d14c5f532dd772d2",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "var input_base64 = flow.get(\"img_path_list\")[1];\nmsg.image = input_base64;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 100,
        "y": 460,
        "wires": [
            [
                "0789e9478e1fdb58",
                "10e4fc6df7bc9d63"
            ]
        ]
    },
    {
        "id": "d05f1ac033634fa7",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "var input_base64 = flow.get(\"img_path_list\")[0];\nmsg.image = input_base64;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 320,
        "wires": [
            [
                "58e234501d8c55b1",
                "6174458834a5d241"
            ]
        ]
    },
    {
        "id": "58e234501d8c55b1",
        "type": "jimp-image",
        "z": "c4f39e9c.3642f8",
        "name": "bbox img",
        "data": "image",
        "dataType": "msg",
        "ret": "b64",
        "parameter1": "",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 680,
        "y": 320,
        "wires": [
            [
                "218d72d88587ade4"
            ]
        ]
    },
    {
        "id": "218d72d88587ade4",
        "type": "template",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<img width=\"500px\" height=\"667px\" src=\"{{{payload}}}\">",
        "output": "str",
        "x": 860,
        "y": 320,
        "wires": [
            [
                "ce7e3e5f5ec8f6ed"
            ]
        ]
    },
    {
        "id": "ce7e3e5f5ec8f6ed",
        "type": "ui_template",
        "z": "c4f39e9c.3642f8",
        "group": "b070d416.db371",
        "name": "bbox img",
        "order": 12,
        "width": 13,
        "height": 13,
        "format": "<div class=\"display_img\" ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 1020,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "b57ab64f18812edb",
        "type": "ui_text",
        "z": "c4f39e9c.3642f8",
        "group": "b070d416.db371",
        "order": 9,
        "width": 13,
        "height": 1,
        "name": "Org img",
        "label": "Original:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "x": 1100,
        "y": 520,
        "wires": []
    },
    {
        "id": "6b1dfcc1bc4197ac",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "var input = flow.get(\"image_name\");\nmsg.payload = input;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 440,
        "wires": [
            [
                "b57ab64f18812edb",
                "156d071b8dcbfabc"
            ]
        ]
    },
    {
        "id": "156d071b8dcbfabc",
        "type": "ui_text",
        "z": "c4f39e9c.3642f8",
        "group": "b070d416.db371",
        "order": 10,
        "width": 13,
        "height": 1,
        "name": "Pred img",
        "label": "Predicted:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "x": 1100,
        "y": 560,
        "wires": []
    },
    {
        "id": "5bf188cd608342e2",
        "type": "function",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "func": "msg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 160,
        "wires": [
            [
                "8681ba7db5abe4ed"
            ]
        ]
    },
    {
        "id": "742c3b4447cb15d9",
        "type": "inject",
        "z": "83ce028f10c839ea",
        "name": "AutoUpdate",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 4700,
        "wires": [
            [
                "6a6126330c4aae6b",
                "bd6f8aa3ea0384e1",
                "30ba1e03f87eaa84",
                "ec2a330308f0a994"
            ]
        ]
    },
    {
        "id": "ec2a330308f0a994",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "msg.template = flow.get(\"server_list_html\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 4640,
        "wires": [
            [
                "ee6ecbe34f4ee036"
            ]
        ]
    },
    {
        "id": "2e6b2cb392115d0b",
        "type": "watch",
        "z": "c4f39e9c.3642f8",
        "name": "",
        "files": "D:\\\\my_dir\\\\user_csv\\\\user_model_log.csv",
        "recursive": "",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "79ca826d5404622f"
            ]
        ]
    },
    {
        "id": "0e4d949eb47ec59e",
        "type": "function",
        "z": "83ce028f10c839ea",
        "name": "",
        "func": "flow.get(\"server_list_html\") || 0;\nvar input = msg.payload;\nvar str = \"<style>\\n\";\nstr += \".serverDiv {\\n\";\nstr += \"    color: white;\\n\";\nstr += \"    font-weight:    bold;\\n\"\nstr += \"    font-family:    Arial, Helvetica, sans-serif;\\n\";\nstr += \"\tbackground: linear-gradient(90deg, #388EE9, #28ACEA, #19CEEB,  #09EBEE);\\n\";\nstr += \"\tbackground-size: 100% 100%;\\n\";\nstr += \"\tanimation: gradient 15s ease infinite;\\n\";\nstr += \"    margin: 10px;\\n\";\nstr += \"    padding: 15px 10px 6px;\\n\";\nstr += \"    height:30px;\\n\";\nstr += \"    font-size:18px;\\n\";\nstr += \"    border-radius:15px;\\n\";\nstr += \"}\\n\";\nstr += \"</style>\\n\";\n\nfor (let i=0; i<input.length; i++){\n    str += \"<div class='serverDiv'>\\n\";\n    str += \"        <div>\"+ input[i].name+ \"</div>\\n\";\n    str += \"        <br>\\n\";\n    str += \"</div>\\n\";\n}\n\nflow.set(\"server_list_html\", str);\nmsg.template = flow.get(\"server_list_html\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 4560,
        "wires": [
            [
                "ee6ecbe34f4ee036"
            ]
        ]
    },
    {
        "id": "8cde8c170daa4c64",
        "type": "jimp-image",
        "z": "83ce028f10c839ea",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "b64",
        "parameter1": "500",
        "parameter1Type": "num",
        "parameter2": "",
        "parameter2Type": "auto",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 3,
        "jimpFunction": "resize",
        "selectedJimpFunction": {
            "name": "resize",
            "fn": "resize",
            "description": "resize the image. One of the w or h parameters can be set to automatic (\"Jimp.AUTO\" or -1).",
            "parameters": [
                {
                    "name": "w",
                    "type": "num|auto",
                    "required": true,
                    "hint": "the width to resize the image to (or \"Jimp.AUTO\" or -1)"
                },
                {
                    "name": "h",
                    "type": "num|auto",
                    "required": true,
                    "hint": "the height to resize the image to (or \"Jimp.AUTO\" or -1)"
                },
                {
                    "name": "mode",
                    "type": "resizeMode",
                    "required": false,
                    "hint": "a scaling method (e.g. Jimp.RESIZE_BEZIER)"
                }
            ]
        },
        "x": 650,
        "y": 2320,
        "wires": [
            [
                "facfc300b3094b33"
            ]
        ]
    },
    {
        "id": "25db6711116f8b81",
        "type": "jimp-image",
        "z": "83ce028f10c839ea",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "buf",
        "parameter1": "0.2",
        "parameter1Type": "num",
        "parameter2": "",
        "parameter2Type": "auto",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "brightness",
        "selectedJimpFunction": {
            "name": "brightness",
            "fn": "brightness",
            "description": "adjust the brightness",
            "parameters": [
                {
                    "name": "val",
                    "type": "num",
                    "required": true,
                    "hint": "adjust the brightness by a value -1.0 to 1.0"
                }
            ]
        },
        "x": 950,
        "y": 2320,
        "wires": [
            [
                "3c6f916cd6f08ecb"
            ]
        ]
    },
    {
        "id": "facfc300b3094b33",
        "type": "jimp-image",
        "z": "83ce028f10c839ea",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "b64",
        "parameter1": "0.1",
        "parameter1Type": "num",
        "parameter2": "",
        "parameter2Type": "auto",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 1,
        "jimpFunction": "contrast",
        "selectedJimpFunction": {
            "name": "contrast",
            "fn": "contrast",
            "description": "adjust the contrast",
            "parameters": [
                {
                    "name": "val",
                    "type": "num",
                    "required": true,
                    "hint": "adjust the contrast by a value -1.0 to 1.0"
                }
            ]
        },
        "x": 800,
        "y": 2320,
        "wires": [
            [
                "25db6711116f8b81"
            ]
        ]
    },
    {
        "id": "b6011226b339740e",
        "type": "jimp-image",
        "z": "83ce028f10c839ea",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "ret": "buf",
        "parameter1": "500",
        "parameter1Type": "num",
        "parameter2": "",
        "parameter2Type": "auto",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 950,
        "y": 2380,
        "wires": [
            []
        ]
    }
]